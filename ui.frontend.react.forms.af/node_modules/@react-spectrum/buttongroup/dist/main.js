"use client";

require("./main.css");
var $fJaYF$reactspectrumutils = require("@react-spectrum/utils");
var $fJaYF$reactariautils = require("@react-aria/utils");
var $fJaYF$reactspectrumprovider = require("@react-spectrum/provider");
var $fJaYF$react = require("react");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "ButtonGroup", () => $d384d3249418a107$export$69b1032f2ecdf404);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /// <reference types="css-module-types" />
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



var $2e9803b3bbead7d0$exports = {};

$parcel$export($2e9803b3bbead7d0$exports, "spectrum-ButtonGroup", () => $2e9803b3bbead7d0$export$a92faf51352ac608, (v) => $2e9803b3bbead7d0$export$a92faf51352ac608 = v);
$parcel$export($2e9803b3bbead7d0$exports, "spectrum-ButtonGroup--alignCenter", () => $2e9803b3bbead7d0$export$252bc7c4ae05757, (v) => $2e9803b3bbead7d0$export$252bc7c4ae05757 = v);
$parcel$export($2e9803b3bbead7d0$exports, "spectrum-ButtonGroup--alignEnd", () => $2e9803b3bbead7d0$export$30e96c53d7beca11, (v) => $2e9803b3bbead7d0$export$30e96c53d7beca11 = v);
$parcel$export($2e9803b3bbead7d0$exports, "spectrum-ButtonGroup--vertical", () => $2e9803b3bbead7d0$export$84d9c0e1917a4eaf, (v) => $2e9803b3bbead7d0$export$84d9c0e1917a4eaf = v);
$parcel$export($2e9803b3bbead7d0$exports, "spectrum-ButtonGroup-Button", () => $2e9803b3bbead7d0$export$7184de2337c1927f, (v) => $2e9803b3bbead7d0$export$7184de2337c1927f = v);
var $2e9803b3bbead7d0$export$a92faf51352ac608;
var $2e9803b3bbead7d0$export$252bc7c4ae05757;
var $2e9803b3bbead7d0$export$30e96c53d7beca11;
var $2e9803b3bbead7d0$export$84d9c0e1917a4eaf;
var $2e9803b3bbead7d0$export$7184de2337c1927f;
$2e9803b3bbead7d0$export$a92faf51352ac608 = `aaz5ma_spectrum-ButtonGroup`;
$2e9803b3bbead7d0$export$252bc7c4ae05757 = `aaz5ma_spectrum-ButtonGroup--alignCenter`;
$2e9803b3bbead7d0$export$30e96c53d7beca11 = `aaz5ma_spectrum-ButtonGroup--alignEnd`;
$2e9803b3bbead7d0$export$84d9c0e1917a4eaf = `aaz5ma_spectrum-ButtonGroup--vertical`;
$2e9803b3bbead7d0$export$7184de2337c1927f = `aaz5ma_spectrum-ButtonGroup-Button`;


function $d384d3249418a107$var$ButtonGroup(props, ref) {
    let { scale: scale } = (0, $fJaYF$reactspectrumprovider.useProvider)();
    props = (0, $fJaYF$reactspectrumprovider.useProviderProps)(props);
    props = (0, $fJaYF$reactspectrumutils.useSlotProps)(props, "buttonGroup");
    let { children: children, orientation: orientation = "horizontal", isDisabled: isDisabled, align: align = "start", ...otherProps } = props;
    let { styleProps: styleProps } = (0, $fJaYF$reactspectrumutils.useStyleProps)(otherProps);
    let domRef = (0, $fJaYF$reactspectrumutils.useDOMRef)(ref);
    let [hasOverflow, setHasOverflow] = (0, $fJaYF$reactariautils.useValueEffect)(false);
    let checkForOverflow = (0, $fJaYF$react.useCallback)(()=>{
        let computeHasOverflow = ()=>{
            if (domRef.current && orientation === "horizontal") {
                let buttonGroupChildren = Array.from(domRef.current.children);
                let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors
                // If any buttons have negative X positions (align="end") or extend beyond
                // the width of the button group (align="start"), then switch to vertical.
                if (buttonGroupChildren.some((child)=>child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) return true;
                return false;
            }
        };
        if (orientation === "horizontal") setHasOverflow(function*() {
            // Force to horizontal for measurement.
            yield false;
            // Measure, and update if there is overflow.
            yield computeHasOverflow();
        });
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        domRef,
        orientation,
        scale,
        setHasOverflow,
        children
    ]);
    // There are two main reasons we need to remeasure:
    // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)
    (0, $fJaYF$reactariautils.useLayoutEffect)(()=>{
        checkForOverflow();
    }, [
        checkForOverflow
    ]);
    // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure
    let parent = (0, $fJaYF$react.useRef)();
    (0, $fJaYF$reactariautils.useLayoutEffect)(()=>{
        if (domRef.current) parent.current = domRef.current.parentElement;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        domRef.current
    ]);
    (0, $fJaYF$reactspectrumutils.useResizeObserver)({
        ref: parent,
        onResize: checkForOverflow
    });
    return /*#__PURE__*/ (0, ($parcel$interopDefault($fJaYF$react))).createElement("div", {
        ...(0, $fJaYF$reactariautils.filterDOMProps)(otherProps),
        ...styleProps,
        ref: domRef,
        className: (0, $fJaYF$reactspectrumutils.classNames)((0, (/*@__PURE__*/$parcel$interopDefault($2e9803b3bbead7d0$exports))), "spectrum-ButtonGroup", {
            "spectrum-ButtonGroup--vertical": orientation === "vertical" || hasOverflow,
            "spectrum-ButtonGroup--alignEnd": align === "end",
            "spectrum-ButtonGroup--alignCenter": align === "center"
        }, styleProps.className)
    }, /*#__PURE__*/ (0, ($parcel$interopDefault($fJaYF$react))).createElement((0, $fJaYF$reactspectrumutils.SlotProvider), {
        slots: {
            button: {
                UNSAFE_className: (0, $fJaYF$reactspectrumutils.classNames)((0, (/*@__PURE__*/$parcel$interopDefault($2e9803b3bbead7d0$exports))), "spectrum-ButtonGroup-Button")
            }
        }
    }, /*#__PURE__*/ (0, ($parcel$interopDefault($fJaYF$react))).createElement((0, $fJaYF$reactspectrumprovider.Provider), {
        isDisabled: isDisabled
    }, children)));
}
/**
 * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.
 */ let $d384d3249418a107$export$69b1032f2ecdf404 = /*#__PURE__*/ (0, ($parcel$interopDefault($fJaYF$react))).forwardRef($d384d3249418a107$var$ButtonGroup);




//# sourceMappingURL=main.js.map
