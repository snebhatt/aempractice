"use client";

import "./main.css";
import {useSlotProps as $85w8l$useSlotProps, useStyleProps as $85w8l$useStyleProps, useDOMRef as $85w8l$useDOMRef, dimensionValue as $85w8l$dimensionValue, classNames as $85w8l$classNames} from "@react-spectrum/utils";
import {filterDOMProps as $85w8l$filterDOMProps} from "@react-aria/utils";
import $85w8l$react, {forwardRef as $85w8l$forwardRef} from "react";
import {useProviderProps as $85w8l$useProviderProps} from "@react-spectrum/provider";


function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /// <reference types="css-module-types" />
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


var $f81b9c4eea42ecfe$exports = {};

$parcel$export($f81b9c4eea42ecfe$exports, "is-disabled", () => $f81b9c4eea42ecfe$export$d35bc1e505d1ebbf, (v) => $f81b9c4eea42ecfe$export$d35bc1e505d1ebbf = v);
$parcel$export($f81b9c4eea42ecfe$exports, "spectrum-Avatar", () => $f81b9c4eea42ecfe$export$2e049b8d031600fb, (v) => $f81b9c4eea42ecfe$export$2e049b8d031600fb = v);
var $f81b9c4eea42ecfe$export$d35bc1e505d1ebbf;
var $f81b9c4eea42ecfe$export$2e049b8d031600fb;
$f81b9c4eea42ecfe$export$d35bc1e505d1ebbf = `IFaZJG_is-disabled`;
$f81b9c4eea42ecfe$export$2e049b8d031600fb = `IFaZJG_spectrum-Avatar`;



const $ab0b7b2186c39312$var$DEFAULT_SIZE = "avatar-size-100";
const $ab0b7b2186c39312$var$SIZE_RE = /^size-\d+/;
function $ab0b7b2186c39312$var$Avatar(props, ref) {
    props = (0, $85w8l$useSlotProps)(props, "avatar");
    const { alt: alt = "", isDisabled: isDisabled, size: size = $ab0b7b2186c39312$var$DEFAULT_SIZE, src: src, ...otherProps } = (0, $85w8l$useProviderProps)(props);
    const { styleProps: styleProps } = (0, $85w8l$useStyleProps)(otherProps);
    const domRef = (0, $85w8l$useDOMRef)(ref);
    const domProps = (0, $85w8l$filterDOMProps)(otherProps);
    // Casting `size` as `any` since `isNaN` expects a `number`, but we want it
    // to handle `string` numbers; e.g. '300' as opposed to 300
    const sizeValue = typeof size !== "number" && ($ab0b7b2186c39312$var$SIZE_RE.test(size) || !isNaN(size)) ? (0, $85w8l$dimensionValue)($ab0b7b2186c39312$var$DEFAULT_SIZE) // override disallowed size values
     : (0, $85w8l$dimensionValue)(size || $ab0b7b2186c39312$var$DEFAULT_SIZE);
    return /*#__PURE__*/ (0, $85w8l$react).createElement("img", {
        ...styleProps,
        ...domProps,
        alt: alt,
        className: (0, $85w8l$classNames)((0, (/*@__PURE__*/$parcel$interopDefault($f81b9c4eea42ecfe$exports))), "spectrum-Avatar", {
            "is-disabled": isDisabled
        }, styleProps.className),
        ref: domRef,
        src: src,
        style: {
            ...styleProps.style,
            ...sizeValue && {
                height: sizeValue,
                width: sizeValue
            }
        }
    });
}
/**
 * An avatar is a thumbnail representation of an entity, such as a user or an organization.
 */ const $ab0b7b2186c39312$export$e2255cf6045e8d47 = /*#__PURE__*/ (0, $85w8l$forwardRef)($ab0b7b2186c39312$var$Avatar);




export {$ab0b7b2186c39312$export$e2255cf6045e8d47 as Avatar};
//# sourceMappingURL=module.js.map
