{"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;CAUC,GAED,0CAA0C;ACZ1C;;;;;;;;;;CAUC;;;AAiEM,SAAS,0CAAe,OAA2B;IACxD,IAAI,mBAAmB,CAAA,GAAA,oBAAM,EAAE;QAC7B,IAAI,UACF,MAAM,YACN,QAAQ,cACR,UAAU,aACV,SAAS,cACT,UAAU,YACV,QAAQ,iBACR,aAAa,EACb,GAAG;QAEL,IAAI,cAAc,CAAC,CAAC;QACpB,IAAI,cAAc,CAAC,CAAE,CAAA,UAAU,YAAY,cAAc,aAAa,UAAS;QAE/E,IAAI,QAAQ,CAAC;QACb,IAAI,aAAa;YACf,MAAM,2BAA2B,GAAG,SAAS,oCAAoC,KAAsC;gBACrH,OAAO,CAAA,GAAA,kDAA0B,EAAE;oBAAC,GAAG,KAAK;oBAAE,GAAG,OAAO;gBAAA;YAC1D;YACA,MAAM,sBAAsB,GAAG,CAAA,GAAA,0CAAqB;YACpD,MAAM,gBAAgB,GAAG,CAAA,GAAA,oCAAe;YACxC,MAAM,WAAW,GAAG,CAAA,GAAA,+BAAU;YAC9B,MAAM,aAAa,GAAG;QACxB;QAEA,IAAI,aAAa;YACf,MAAM,2BAA2B,GAAG,SAAS,oCAAoC,KAAsC;gBACrH,OAAO,CAAA,GAAA,kDAA0B,EAAE;oBAAC,GAAG,KAAK;oBAAE,GAAG,OAAO;gBAAA;YAC1D,GACA,MAAM,gBAAgB,GAAG,CAAA,GAAA,oCAAe;YACxC,MAAM,sBAAsB,GAAG,SAAS,+BAA+B,KAAiC,EAAE,KAA+B,EAAE,GAA2B;gBACpK,OAAO,CAAA,GAAA,0CAAqB,EAAE;oBAAC,GAAG,KAAK;oBAAE,GAAG,OAAO;gBAAA,GAAG,OAAO;YAC/D;YACA,MAAM,gBAAgB,GAAG,CAAA,GAAA,oCAAe;QAC1C;QAEA,IAAI,eAAe,aACjB,MAAM,iBAAiB,GAAG,CAAA,GAAA,qCAAgB;QAG5C,OAAO;IACT,GAAG;QAAC;KAAQ;IAEZ,OAAO;QACL,kBAAkB;IACpB;AACF;","sources":["packages/@react-spectrum/dnd/src/index.ts","packages/@react-spectrum/dnd/src/useDragAndDrop.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/// <reference types=\"css-module-types\" />\n\nexport type {DragAndDropOptions, DragAndDropHooks} from './useDragAndDrop';\nexport {useDragAndDrop} from './useDragAndDrop';\nexport {DIRECTORY_DRAG_TYPE} from '@react-aria/dnd';\n\nexport type {\n  DirectoryDropItem,\n  DraggableCollectionEndEvent,\n  DraggableCollectionMoveEvent,\n  DraggableCollectionStartEvent,\n  DragPreviewRenderer,\n  DragTypes,\n  DropItem,\n  DropOperation,\n  DroppableCollectionDropEvent,\n  DroppableCollectionEnterEvent,\n  DroppableCollectionExitEvent,\n  DroppableCollectionInsertDropEvent,\n  DroppableCollectionMoveEvent,\n  DroppableCollectionOnItemDropEvent,\n  DroppableCollectionReorderEvent,\n  DroppableCollectionRootDropEvent,\n  DropPosition,\n  DropTarget,\n  FileDropItem,\n  ItemDropTarget,\n  RootDropTarget,\n  TextDropItem\n} from '@react-types/shared';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  DraggableCollectionOptions,\n  DraggableItemProps,\n  DraggableItemResult,\n  DragPreview,\n  DropIndicatorAria,\n  DropIndicatorProps,\n  DroppableCollectionOptions,\n  DroppableCollectionResult,\n  DroppableItemOptions,\n  DroppableItemResult,\n  isVirtualDragging,\n  useDraggableCollection,\n  useDraggableItem,\n  useDropIndicator,\n  useDroppableCollection,\n  useDroppableItem\n} from '@react-aria/dnd';\nimport {DraggableCollectionProps, DragItem, DroppableCollectionProps, Key} from '@react-types/shared';\nimport {\n  DraggableCollectionState,\n  DraggableCollectionStateOptions,\n  DroppableCollectionState,\n  DroppableCollectionStateOptions,\n  useDraggableCollectionState,\n  useDroppableCollectionState\n} from '@react-stately/dnd';\nimport {JSX, RefObject, useMemo} from 'react';\n\ninterface DraggableCollectionStateOpts extends Omit<DraggableCollectionStateOptions, 'getItems'> {}\n\ninterface DragHooks {\n  useDraggableCollectionState?: (props: DraggableCollectionStateOpts) => DraggableCollectionState,\n  useDraggableCollection?: (props: DraggableCollectionOptions, state: DraggableCollectionState, ref: RefObject<HTMLElement>) => void,\n  useDraggableItem?: (props: DraggableItemProps, state: DraggableCollectionState) => DraggableItemResult,\n  DragPreview?: typeof DragPreview\n}\n\ninterface DropHooks {\n  useDroppableCollectionState?: (props: DroppableCollectionStateOptions) => DroppableCollectionState,\n  useDroppableCollection?: (props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>) => DroppableCollectionResult,\n  useDroppableItem?: (options: DroppableItemOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>) => DroppableItemResult,\n  useDropIndicator?: (props: DropIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement>) => DropIndicatorAria\n}\n\nexport interface DragAndDropHooks {\n  /** Drag and drop hooks for the collection element.  */\n  dragAndDropHooks: DragHooks & DropHooks & {isVirtualDragging?: () => boolean, renderPreview?: (keys: Set<Key>, draggedKey: Key) => JSX.Element}\n}\n\nexport interface DragAndDropOptions extends Omit<DraggableCollectionProps, 'preview' | 'getItems'>, DroppableCollectionProps {\n  /**\n   * A function that returns the items being dragged. If not specified, we assume that the collection is not draggable.\n   * @default () => []\n   */\n  getItems?: (keys: Set<Key>) => DragItem[],\n  /** Provide a custom drag preview. `draggedKey` represents the key of the item the user actually dragged. */\n  renderPreview?: (keys: Set<Key>, draggedKey: Key) => JSX.Element\n}\n\n/**\n * Provides the hooks required to enable drag and drop behavior for a drag and drop compatible React Spectrum component.\n */\nexport function useDragAndDrop(options: DragAndDropOptions): DragAndDropHooks {\n  let dragAndDropHooks = useMemo(() => {\n    let {\n      onDrop,\n      onInsert,\n      onItemDrop,\n      onReorder,\n      onRootDrop,\n      getItems,\n      renderPreview\n     } = options;\n\n    let isDraggable = !!getItems;\n    let isDroppable = !!(onDrop || onInsert || onItemDrop || onReorder || onRootDrop);\n\n    let hooks = {} as DragHooks & DropHooks & {isVirtualDragging?: () => boolean, renderPreview?: (keys: Set<Key>, draggedKey: Key) => JSX.Element};\n    if (isDraggable) {\n      hooks.useDraggableCollectionState = function useDraggableCollectionStateOverride(props: DraggableCollectionStateOptions) {\n        return useDraggableCollectionState({...props, ...options});\n      };\n      hooks.useDraggableCollection = useDraggableCollection;\n      hooks.useDraggableItem = useDraggableItem;\n      hooks.DragPreview = DragPreview;\n      hooks.renderPreview = renderPreview;\n    }\n\n    if (isDroppable) {\n      hooks.useDroppableCollectionState = function useDroppableCollectionStateOverride(props: DroppableCollectionStateOptions) {\n        return useDroppableCollectionState({...props, ...options});\n      },\n      hooks.useDroppableItem = useDroppableItem;\n      hooks.useDroppableCollection = function useDroppableCollectionOverride(props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>) {\n        return useDroppableCollection({...props, ...options}, state, ref);\n      };\n      hooks.useDropIndicator = useDropIndicator;\n    }\n\n    if (isDraggable || isDroppable) {\n      hooks.isVirtualDragging = isVirtualDragging;\n    }\n\n    return hooks;\n  }, [options]);\n\n  return {\n    dragAndDropHooks: dragAndDropHooks\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}