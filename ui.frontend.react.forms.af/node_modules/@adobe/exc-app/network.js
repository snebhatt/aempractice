"use strict";
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApolloClient = exports.getApolloClient = exports.query = exports.getPrefetched = exports.fetch = exports.FetchScope = exports.ROUTING = exports.DEFAULT_STATUS_CODES_TO_RETRY = void 0;
const Global_1 = require("./src/Global");
/**
 * Default status codes which imply a transient error and can be retried.
 */
exports.DEFAULT_STATUS_CODES_TO_RETRY = [429, 502, 503, 504];
var ROUTING;
(function (ROUTING) {
    /**
     * Route by the AEP region found in the user profile
     */
    ROUTING[ROUTING["AEP_PROFILE_BASED"] = 0] = "AEP_PROFILE_BASED";
    /**
     * Default routing - Latency based.
     */
    ROUTING[ROUTING["DEFAULT"] = 1] = "DEFAULT";
    /**
     * Specify region in query (Client Side routing)
     */
    ROUTING[ROUTING["REGION_BASED_PER_QUERY"] = 2] = "REGION_BASED_PER_QUERY";
})(ROUTING = exports.ROUTING || (exports.ROUTING = {}));
/**
 * This parameter will be used to specify what headers are automatically added to the API call.
 */
var FetchScope;
(function (FetchScope) {
    /**
     * ***none: Minimal scope***
     * No headers are added. Use case: Non authenticated calls.
     */
    FetchScope["NONE"] = "NONE";
    /**
     * *** auth: Authentication only. Only auth headers will be added: ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     */
    FetchScope["AUTH"] = "AUTH";
    /**
     * *** org: Authentication + IMS Org. ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     */
    FetchScope["ORG"] = "ORG";
    /**
     * *** sandbox: Authentication +IMS Org + PALM Sandboxes. ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     * x-sandbox-name: <SANDBOX NAME>
     */
    FetchScope["SANDBOX"] = "SANDBOX";
    /**
     * *** sandbox-plus: additional headers required with sandbox . ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     * x-sandbox-name: <SANDBOX NAME>
     * x-sandbox-type: <SANDBOX TYPE>
     * x-sandbox-default: <SANDBOX DEFAULT>
     */
    FetchScope["SANDBOX_PLUS"] = "SANDBOX_PLUS";
})(FetchScope = exports.FetchScope || (exports.FetchScope = {}));
/**
 * Provides an interface for fetching resources powered by the global 'fetch' API.
 *
 * ***Example:***
 *
 * ```typescript
 * // performs a window.fetch call
 * let response = await fetch('https://example.com/api/ping');
 *
 * // performs a window.fetch call with Authorization and x-api-key headers set
 * response = await fetch('https://localhost', {auth: 'Header', method: 'GET'});
 *
 * // performs a window.fetch call with user_token and client_id query parameters added to the URL
 * const request = new Request('https://localhost', {
 *   body: JSON.stringify({k: 'v'}),
 *   headers: new Headers(),
 *   method: 'POST'
 * });
 * response = await fetch(request, {auth: 'Header'});
 * ```
 * @param input The resource that you wish to fetch. It can either be the URL of the resource you
 * want to fetch or a Request object.
 * @param init An object containing any custom settings that you want to apply to the request.
 * @returns The promise for the response to the fetch operation.
 */
function fetch(input, init) {
    return (0, Global_1.getImpl)('network').fetch(input, init);
}
exports.fetch = fetch;
/**
 * Provides an interface for querying known data.
 * Data querying and caching are managed in Unified Shell in advance.
 *
 * This is an experimental feature.
 * @template T
 * @param key - Data Contract key
 * @param options - Prefetch options
 * @returns Promise for the contract execution response
 */
function getPrefetched(key, options) {
    return (0, Global_1.getImpl)('network').getPrefetched(key, options);
}
exports.getPrefetched = getPrefetched;
/**
 * Provides an interface for querying resources via GraphqQL.
 * In order to consume query, please make sure the respective query resolver is
 * available in the GraphQL Service.
 * ***Example:***
 *
 * ```typescript
 * const PPS_QUERY = `
 *   query PPSQuery($userId: String!, $apiKey: String!) {
 *     getPPSProfile(userId: $userId, apiKey: $apiKey) {
 *       images
 *     }
 *   }`;
 *
 * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
 * query({data: {query: PPS_QUERY, variables: {
 *   userId: '123@AdobeID',
 *   apiKey: 'test-app',
 * }}, operationName: 'PPSAvatar'});
 *
 * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
 * query({data: {query: `
 *   query PPSQuery {
 *     getPPSProfile(userId: "123@AdobeID", apiKey: "test-app") {
 *       images
 *     }
 *   }`
 * }});
 * ```
 * @param input Query request containing desired GQL Query.
 * @returns The promise for the response to the query operation.
 */
function query(input) {
    return (0, Global_1.getImpl)('network').query(input);
}
exports.query = query;
/**
 * Provides an interface for querying resources via GraphqQL using ApolloClient
 * ***Example***
 * ```typescript
 *  const apolloClientModule = await getApolloClient();
 *  const apolloClient = apolloClientModule.apolloClient;
 *  const gql = apolloClientModule.gql;
 *  const result = await apolloClient.query({
 *    query: gql`query  user {
 *      id
 *      name
 *    }`,
 *    variables : {}
 *  });
 *  console.log(result.data);
 * ```
 * @param options Configuration to create ApolloClient instance
 * @returns GraphQL query response
 *
 */
function getApolloClient(options) {
    return (0, Global_1.getImpl)('network').getApolloClient(options);
}
exports.getApolloClient = getApolloClient;
function createApolloClient(apolloClientProvided, options) {
    return (0, Global_1.getImpl)('network').createApolloClient(apolloClientProvided, options);
}
exports.createApolloClient = createApolloClient;
//# sourceMappingURL=network.js.map