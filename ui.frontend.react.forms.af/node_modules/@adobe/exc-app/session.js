"use strict";
/*************************************************************************
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionScope = void 0;
/**
 * APIs to get, set or invalidate session data. These APIs are meant for applications using their
 * own session management in addition Adobe IMS. These APIs are not meant to manage session but
 * rather cache and recycle them whenever possible.
 *
 * To consume this API, add the following import to your code.
 *
 * ```typescript
 * import session from '@adobe/exc-app/session';
 * ```
 *
 * The default export is an object of type [SessionApi](../interfaces/_session_.sessionapi.md)
 *
 * API reference: [scroll down](#index)
 *
 * ### Sample code
 *
 * ``` typescript
 * import session from '@adobe/exc-app/settings';
 *
 * // Get
 * const session = await session.get();
 *
 * // Set to expire an hour from now
 * await session.set({
 *   expires: Date.now() + 3600 * 1000,
 *   id: 'SESSION_ID'
 * });
 *
 * // Invalidate session
 * const session = await session.get();
 * await session.invalidate(session);
 * ```
 * @packageDocumentation
 * @module session
 */
const Global_1 = require("./src/Global");
/**
 * Sets the scope validity. Ensuring a session can not be used outside of its context.
 */
var SessionScope;
(function (SessionScope) {
    /**
     * User - Session is valid for the current user only.
     */
    SessionScope["USER"] = "user";
    /**
     * Organization - Session is valid for the current user and organization only.
     */
    SessionScope["ORG"] = "org";
    /**
     * Context - Session is valid for the current user, organization and context only.
     * Context depends on the solution - Could be Sandboxes or Sub orgs.
     */
    SessionScope["CONTEXT"] = "context";
})(SessionScope = exports.SessionScope || (exports.SessionScope = {}));
const session = {
    get: () => (0, Global_1.getImpl)('session')().get(),
    invalidate: (session) => (0, Global_1.getImpl)('session')().invalidate(session),
    set: (session) => (0, Global_1.getImpl)('session')().set(session)
};
exports.default = session;
//# sourceMappingURL=session.js.map