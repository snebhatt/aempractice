"use strict";
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Internal = void 0;
const Global_1 = require("./src/Global");
/**
 * @ignore
 */
class Internal {
    static addPoller(poller) {
        return (0, Global_1.getImpl)('internal').addPoller(poller);
    }
    static configureMetrics(config) {
        return (0, Global_1.getImpl)('internal').configureMetrics(config);
    }
    static configureNetwork(config) {
        return (0, Global_1.getImpl)('internal').configureNetwork(config);
    }
    static configurePolling(config) {
        return (0, Global_1.getImpl)('internal').configurePolling(config);
    }
    static flush() {
        return (0, Global_1.getImpl)('internal').flush();
    }
    static getActivityMonitor() {
        return (0, Global_1.getImpl)('internal').getActivityMonitor();
    }
    static preloadEngine() {
        return (0, Global_1.getImpl)('internal').preloadEngine();
    }
    static registerActivityEmitter(emitter) {
        return (0, Global_1.getImpl)('internal').registerActivityEmitter(emitter);
    }
    static removePoller(handle) {
        return (0, Global_1.getImpl)('internal').removePoller(handle);
    }
    static setApplication(app) {
        return (0, Global_1.getImpl)('internal').setApplication(app);
    }
    static setFilter(filterFunction) {
        return (0, Global_1.getImpl)('internal').setFilter(filterFunction);
    }
    static setUser(user, version) {
        return (0, Global_1.getImpl)('internal').setUser(user, version);
    }
    static clearUser(version) {
        return (0, Global_1.getImpl)('internal').clearUser(version);
    }
    static waitForGainsight() {
        return (0, Global_1.getImpl)('internal').waitForGainsight();
    }
}
exports.Internal = Internal;
//# sourceMappingURL=internal.js.map