/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
import type { ActiveProductContext, ImsProfile } from './ims/ImsProfile';
import type { ConsentPermissions } from './consent';
import type MetricsConfiguration from './metrics/Configuration';
export interface UserRoles {
    roleJobFunction: Record<string, boolean>;
    rolePlatformObjective: Record<string, boolean | string>;
}
/**
 * Gainsight Interface
 */
export interface Gainsight {
    /**
     * ID of the application.
     */
    appId: string;
    /**
     * Composed application parent name.
     */
    appParent: string | undefined;
    /**
     * If Gainsight is enabled for the user.
     */
    enabled: boolean;
    /**
     * Unified Shell environment.
     */
    environment: string;
    /**
     * Is product key different from parent? This is used in Data Collection when Gainsight
     * is initialized.
     */
    isKeyDifferentFromParent?: boolean;
    /**
     * OMEGA suite ID.
     */
    omegaSuiteId: string;
    /**
     * Gainsight app-specific product key.
     */
    productKey: string;
    /**
     * Path of the application within Shell.
     */
    shellPath: string;
    /**
     * User-specific properties.
     */
    user: {
        /**
         * Auth ID.
         */
        authId: string;
        /**
         * Object containing consent permissions.
         */
        permissions?: ConsentPermissions;
        /**
         * Object containing role information (AEP feature).
         */
        roles?: UserRoles;
        /**
         * Unified Shell theme.
         */
        theme: string;
        /**
         * List of triggers.
         */
        triggers: string[];
    };
    /**
     * Gainsight configuration from application config.
     */
    triggers?: {
        /**
         * List of fulfillable items from product context.
         */
        fulfillableItems: string[];
        /**
         * Service code from product context.
         */
        serviceCode: string;
    };
}
/**
 * ImsOrg Interface
 */
export interface ImsOrg {
    /**
     * ImsOrg Name - Label
     */
    label: string;
    /**
     * ImsOrg ID - Value
     */
    value: string;
}
/**
 * ImsOrg Interface
 */
export interface ImsInfo {
    /**
     * ImsOrg - ID
     */
    imsOrg?: string;
    /**
     * ImsOrg Name - Label
     */
    imsOrgName?: string;
    /**
     * ImsOrg Profile
     */
    imsProfile?: ImsProfile;
    /**
     * ImsToken
     */
    imsToken?: string;
    /**
     * locale
     */
    locale?: string;
    /**
     * tenant
     */
    tenant?: string;
}
/**
 * User Sandbox Interface
 */
interface Sandbox {
    /**
     * Whether it is the default sandbox
     */
    isDefault: boolean;
    /**
     * Sandbox ID
     */
    name: string;
    /**
     * Region
     */
    region: string;
    /**
     * Current state
     */
    state: string;
    /**
     * Sandbox Display Title
     */
    title: string;
    /**
     * Environment type
     */
    type: string;
}
/**
 * User SubOrg Interface
 */
export interface SubOrg {
    /**
     * SubOrg ID
     */
    id: string;
    /**
     * Whether this was the last used SubOrg
     */
    lastUsed: boolean;
    /**
     * Human readable name
     */
    name: string;
    /**
     * [DEPRECATED] Default path property.
     */
    orgIdName: string;
    /**
     * Org ID
     */
    owningEntity: string;
    /**
     * Path specific version of the name
     */
    path: string;
    /**
     * Whether this is the preferred SubOrg for the Org
     */
    preferred: boolean;
}
export interface AnalyticsConfiguration {
    /**
     * OMEGA script for respective env
     */
    script: string;
    /**
     * solution specific OMEGA code
     */
    solution: string;
}
export interface NestedAppConfig extends AnalyticsConfiguration {
    appId: string;
    gainsight?: {
        productKey: string;
        triggers?: {
            fulfillableItems: string[];
            serviceCode: string;
        };
    };
}
/**
 * External Runtime Configuration Interface
 */
export interface RuntimeConfiguration {
    /**
     * Active product context - Used by Adobe Analytics to determine login company
     */
    activeProductContext?: ActiveProductContext;
    /**
     * OMEGA Launch script properties
     */
    analytics?: AnalyticsConfiguration;
    /**
     * Unified Shell API Gateway URL
     */
    apiGatewayUrl: string;
    /**
     * API Key that will be added to x-api-key on requests
     */
    apiKey: string;
    /**
     * App Container
     */
    appContainer: string;
    /**
     * Solution appId
     */
    appId: string;
    /**
     * User's avatar url
     */
    avatar: string;
    /**
     * Solution iframe src url
     */
    baseFrameUrl: string;
    /**
     * Base path of the baseUrl property, without tenant or URL context.
     */
    basePath: string;
    /**
     * Base URL
     */
    baseUrl: string;
    /**
     * List of search parameters to remove from the browser url
     */
    browserParamFilterList?: string[];
    /**
     * Environment specific CDN string.
     */
    cdn: string;
    /**
     * List all properties changed in this configuration compared to the previous one sent
     */
    changedProperties: (keyof RuntimeConfiguration)[];
    /**
     * Bootstrap data for the component modal.
     */
    componentBootstrapData?: Record<string, any> | undefined;
    /**
     * If discovery URL
     */
    discovery: boolean;
    /**
     * Unified Shell's environment
     */
    environment: string;
    /**
     * Query params
     */
    externalQueryParams: string;
    /**
     * List of feature flags
     */
    featureFlags?: Record<string, string>;
    /**
     * Gainsight configuration.
     */
    gainsight: Gainsight;
    /**
     * Clients can pass in their local GQL endpoint
     */
    gqlEndpoint?: string;
    /**
     * Solution History type
     */
    historyType: 'HASH' | 'HISTORY' | 'SERVER';
    /**
     * @deprecated Solution's list of multiple subdomains
     */
    hosts?: string[];
    /**
     * Fulfillable Items
     */
    fulfillableItems?: string[];
    /**
     * IMS Client ID
     */
    imsClientId: string;
    /**
     * IMS env
     */
    imsEnvironment: string;
    /**
     * IMS Information
     */
    imsInfo: ImsInfo;
    /**
     * Current IMS Org ID
     */
    imsOrg: string;
    /**
     * ImsOrg Interface
     */
    imsOrgs: ImsOrg[];
    /**
     * Current IMS Org Name
     */
    imsOrgName: string;
    /**
     * User IMS Profile
     */
    imsProfile?: ImsProfile;
    /**
     * IMS Token
     */
    imsToken: string;
    /**
     * If the app/runtime are loaded in a modal.
     */
    inModal?: boolean;
    /**
     * @ignore
     */
    internal?: boolean;
    /**
     * Adobe IO gateway URL used as a fallback in GQL call
     */
    ioGatewayUrl?: string;
    /**
     * Map of Adobe Io region specific endpoints.
     */
    ioRegionSpecificMap?: Record<string, string>;
    /**
     * Last recorded recent timestamp
     */
    lastRecentTs: number;
    /**
     * User Locale
     */
    locale: string;
    /**
     * Solution metricsAppId
     */
    metricsAppId?: string;
    /**
     * AdobeMetricsRuntime Configuration
     */
    metricsConfig: MetricsConfiguration;
    /**
     * Metrics environment (may differ from environment)
     */
    metricsEnv?: string;
    /**
     * Applications that can load under the current application
     */
    nestedApps?: Record<string, NestedAppConfig>;
    /**
     * In a nested application, the parent application ID.
     */
    parentAppId?: string;
    /**
     * List of languages from user's preferences
     */
    preferredLanguages?: string[];
    /**
     * Current Sandbox
     */
    sandbox?: Sandbox;
    /**
     * Shell Height
     */
    shellHeight: number;
    /**
     * Shell Info
     */
    shellInfo?: Record<string, any>;
    /**
     * Is Side Nav collapsed?
     */
    shellSideNavCollapsed?: boolean;
    /**
     * Is Side Nav enabled?
     */
    shellSideNavPresent: boolean;
    /**
     * Side Nav width
     */
    shellSideNavWidth: number;
    /**
     * Source environment
     */
    sourceEnvironment: string;
    /**
     * SPA pipeline app id
     */
    spaAppId?: string;
    /**
     * Sub Org
     */
    subOrg?: SubOrg;
    /**
     * Tenant ID
     */
    tenant: string;
    /**
     * @deprecated Solution GraphQL tenantAppId
     */
    tenantAppId?: string;
    theme: string;
    /**
     * If the toast quiet mode feature is enabled.
     */
    toastQuietModeEnabled: boolean;
    /**
     * User's consent permissions
     */
    userConsentPermissions?: ConsentPermissions;
    /**
     * XQL gateway used for AEP specific queries
     */
    xqlGatewayUrl?: string;
}
export {};
