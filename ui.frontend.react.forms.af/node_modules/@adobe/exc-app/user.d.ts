/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
/**
 * API to request user-specific information such as IMS organization, IMS profile, access token,
 * tenant, etc. It also  provides solutions with other capabilities such as notifying the shell that
 * the session has expired and configuring a logout URL to expire custom sessions.
 *
 * ***Import:***
 *
 * ```typescript
 * import user from '@adobe/exc-app/user';
 * ```
 *
 * ***Default export:***
 *
 * [UserApi](../interfaces/user.userapi.md#interface-userapi)
 *
 * ***Usage:***
 *
 * Below is an example of how to get various attributes associated to the user:
 *
 * ```typescript
 * import user from '@adobe/exc-app/user';
 *
 * const [avatar, orgInfo, org, name, orgs, token, profile, locale, languages, subOrg, tenant, theme] = await Promise.all([
 *   user.get('avatar'),
 *   user.get('imsInfo'),
 *   user.get('imsOrg'),
 *   user.get('imsOrgName'),
 *   user.get('imsOrgs'),
 *   user.get('imsToken'),
 *   user.get('imsProfile'),
 *   user.get('locale'),
 *   user.get('preferredLanguages'),
 *   user.get('subOrg'),
 *   user.get('tenant'),
 *   user.get('theme')
 * ]);
 * ```
 *
 * ### Receiving updates
 *
 * You can also listen for updates on the requested data by listening to specific change events.
 *
 * These change events are emitted from the api that the data is requested from. For example, if a
 * user calls `await user.get('locale');` they must listen for the change event on
 * `user.on('change:locale')`. If a user calls `await user.get('imsOrg')` they must listen for the
 * change event on `user.on('change:imsOrg')`. Here is a more detailed example of how the promise
 * api and change events can be used to keep track of specific values from the config:
 *
 * ```typescript
 * import user from '@adobe/exc-app/user';
 *
 * constructor() {
 *   this.state = {org: null, shell: {}};
 *
 *   user.on('change:imsOrg', (org) => {
 *     this.setState({org});
 *   });
 * }
 *
 * async componentDidMount() {
 *   const org = await user.get('imsOrg');
 *   this.setState({org});
 * }
 * ```
 *
 * imsInfo is a special case. When listening for updates on imsInfo, the callback will receive
 * two arguments. The first is the entire imsInfo object. The second is an object containing only
 * the values that have changed (for example, an org change between an individual account and a
 * type2e account will cause the imsProfile to change, while an org change within the same account will not).
 *
 * ```typescript
 *  user.on('change:imsInfo', (info, changed) => {
 *     if ('imsProfile' in changed) {
 *       // load information for new account
 *     }
 *
 *     this.setState({...info});
 *   });
 * ```
 * @packageDocumentation
 * @module user
 */
import EventEmitter from './src/EventEmitter';
export interface Sandbox {
    isDefault: boolean;
    name: string;
    region: string;
    state: string;
    title: string;
    type: string;
}
/**
 * Logout URL can either be a string or an object. The object includes the URL
 * to be called on logout and whether this URL should be the only version of the
 * host in the logout list.
 */
export type LogoutUrl = string | {
    distinctDomain?: boolean;
    url: string;
};
export interface IMS {
    client_id: string;
    scopes: string;
}
/**
 * ImsInfo encompasses all of the information associated with a given ims org.
 */
export interface IMSInfo {
    imsOrg?: string;
    imsOrgName?: string;
    imsProfile?: Record<string, any>;
    imsToken?: string;
    locale?: string;
    tenant?: string;
}
export interface UserInfo {
    imsInfo: IMSInfo;
    imsOrg: string;
    imsOrgName: string;
    imsOrgs: {
        label: string;
        value: string;
    }[];
    imsToken: string;
    imsProfile: Record<string, any>;
    locale: string;
    preferredLanguages: string[];
    sandbox: Sandbox;
    sandboxes: Array<Sandbox>;
    subOrg: string | null;
    tenant: string;
    theme: 'spectrum--darkest' | 'spectrum--lightest';
}
interface UserInfoEvent {
    'change:avatar': string;
    'change:imsInfo': IMSInfo;
    'change:imsOrg': string;
    'change:imsOrgName': string;
    'change:imsOrgs': {
        label: string;
        value: string;
    }[];
    'change:imsToken': string;
    'change:imsProfile': Record<string, any>;
    'change:locale': string;
    'change:preferredLanguages': string[];
    'change:sandbox': Sandbox;
    'change:sandboxes': Array<Sandbox>;
    'change:subOrg': string | null;
    'change:tenant': string;
    'change:theme': string;
}
export interface UserApi extends EventEmitter<UserInfoEvent> {
    /**
     * API to notify the unified shell that APIs are returning 401 and user needs to be
     * re-authenticated.
     */
    authExpired(): void;
    /**
     * API to generate a sub-org based on a provided product context and overrides.
     * @param productContext The product context entry for the sub-org to generate.
     * @param overrides Any override values that will be applied on top of the product context.
     */
    generateSubOrg(productContext: Record<string, string>, overrides?: Record<string, string>): Promise<string>;
    /**
     * API to do token exchange.
     */
    /**
     * @ignore
     */
    getCustomToken(ims: IMS): Promise<string>;
    /**
     * API to get fulfillable items for a service code.
     * @param serviceCode The service code tied to the fulfillable items to fetch.
     */
    getFulfillableItems(serviceCode: string): Promise<string[]>;
    /**
     * Gets the specified type of information about an user.
     * @param type The type of information to get.
     */
    get<T extends keyof UserInfo>(type: T): Promise<UserInfo[T]>;
    /**
     * Optional. When specified this URL will be invoked upon user logging out. This is useful to
     * reduce the number of lingering sessions for solutions who have their own sessions server
     * (in addition to IMS).
     */
    logoutUrl?: LogoutUrl;
    /**
     * If language picker should be opened.
     */
    showLanguagePicker: boolean | undefined;
    /**
     * If roles picker should be opened.
     */
    showRolesPicker: boolean | undefined;
}
declare const user: UserApi;
export default user;
