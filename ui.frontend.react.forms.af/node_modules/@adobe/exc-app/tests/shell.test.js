"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const Global_1 = __importDefault(require("../src/Global"));
const shell_1 = __importDefault(require("../shell"));
describe('shell.ts', () => {
    const evt = '';
    const handler = () => { };
    const shellMock = {
        emit: (type, evt) => {
            return { evt, type };
        },
        get: (param) => {
            return Promise.resolve(param);
        },
        getExtendedShellInfo: () => {
            return Promise.resolve({});
        },
        off: (type, handler) => {
            return { handler, type };
        },
        on: (type, handler) => {
            return { handler, type };
        }
    };
    beforeEach(() => {
        Global_1.default['exc-module-runtime'] = {
            shell: () => {
                return shellMock;
            }
        };
    });
    it('can emit()', () => {
        const spy = jest.spyOn(shellMock, 'emit');
        // action
        shell_1.default.emit('change:environment', evt),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:environment', evt);
    });
    it('can get()', () => __awaiter(void 0, void 0, void 0, function* () {
        const spy = jest.spyOn(shellMock, 'get');
        // action
        yield Promise.all([
            shell_1.default.get('environment'),
            shell_1.default.get('imsEnvironment'),
            shell_1.default.get('shellInfo')
        ]);
        // verify
        expect(spy).toBeCalledTimes(3);
        expect(spy).toBeCalledWith('environment');
        expect(spy).toBeCalledWith('imsEnvironment');
        expect(spy).toBeCalledWith('shellInfo');
    }));
    it('can getExtendedShellInfo()', () => __awaiter(void 0, void 0, void 0, function* () {
        const spy = jest.spyOn(shellMock, 'getExtendedShellInfo');
        // action
        yield shell_1.default.getExtendedShellInfo();
        // verify
        expect(spy).toBeCalledTimes(1);
    }));
    it('can off()', () => {
        const spy = jest.spyOn(shellMock, 'off');
        // action
        shell_1.default.off('change:environment', handler),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:environment', handler);
    });
    it('can on()', () => {
        const spy = jest.spyOn(shellMock, 'on');
        // action
        shell_1.default.on('change:environment', handler),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:environment', handler);
    });
});
//# sourceMappingURL=shell.test.js.map