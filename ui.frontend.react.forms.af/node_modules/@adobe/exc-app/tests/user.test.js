"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const Global_1 = __importDefault(require("../src/Global"));
const user_1 = __importDefault(require("../user"));
describe('user.ts', () => {
    const evt = '';
    const handler = () => { };
    const userMock = {
        authExpired: () => { },
        emit: (type, evt) => {
            return { evt, type };
        },
        generateSubOrg: () => {
            return Promise.resolve('sub-org');
        },
        get: (param) => {
            return Promise.resolve(param);
        },
        getCustomToken: (ims) => {
            return Promise.resolve(ims.toString());
        },
        getFulfillableItems: (serviceCode) => {
            return Promise.resolve([`${serviceCode}_fi`]);
        },
        logoutUrl: 'https://localhost/logout',
        off: (type, handler) => {
            return { handler, type };
        },
        on: (type, handler) => {
            return { handler, type };
        },
        showLanguagePicker: undefined,
        showRolesPicker: undefined
    };
    beforeEach(() => {
        Global_1.default['exc-module-runtime'] = {
            user: () => {
                return userMock;
            }
        };
    });
    it('can emit()', () => {
        const spy = jest.spyOn(userMock, 'emit');
        // action
        user_1.default.emit('change:theme', evt),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:theme', evt);
    });
    it('can get()', () => __awaiter(void 0, void 0, void 0, function* () {
        const spy = jest.spyOn(userMock, 'get');
        // action
        yield Promise.all([
            user_1.default.get('imsOrg'),
            user_1.default.get('imsOrgName'),
            user_1.default.get('imsOrgs'),
            user_1.default.get('imsToken'),
            user_1.default.get('imsProfile'),
            user_1.default.get('locale'),
            user_1.default.get('preferredLanguages'),
            user_1.default.get('sandbox'),
            user_1.default.get('sandboxes'),
            user_1.default.get('subOrg'),
            user_1.default.get('tenant'),
            user_1.default.get('theme')
        ]);
        // verify
        expect(spy).toBeCalledTimes(12);
        expect(spy).toBeCalledWith('imsOrg');
        expect(spy).toBeCalledWith('imsOrgName');
        expect(spy).toBeCalledWith('imsOrgs');
        expect(spy).toBeCalledWith('imsToken');
        expect(spy).toBeCalledWith('imsProfile');
        expect(spy).toBeCalledWith('locale');
        expect(spy).toBeCalledWith('preferredLanguages');
        expect(spy).toBeCalledWith('sandbox');
        expect(spy).toBeCalledWith('sandboxes');
        expect(spy).toBeCalledWith('subOrg');
        expect(spy).toBeCalledWith('tenant');
        expect(spy).toBeCalledWith('theme');
        // Verify logoutUrl getter
        expect(user_1.default.logoutUrl).toEqual('https://localhost/logout');
    }));
    it('can generateSubOrg()', () => {
        const spy = jest.spyOn(userMock, 'generateSubOrg');
        user_1.default.generateSubOrg({
            global_company_id: 'suborg1',
            ident: 'BBWWP9TCRVXT18TDX7ZG6TCPH4',
            owningEntity: '6A29340459CA8D350A49413A@AdobeOrg',
            serviceCode: 'dma_test'
        });
        expect(spy).toBeCalledTimes(1);
    });
    it('can getCustomToken()', () => {
        const spy = jest.spyOn(userMock, 'getCustomToken');
        user_1.default.getCustomToken({ client_id: 'client', scopes: 'scope1,scope2' });
        expect(spy).toBeCalledTimes(1);
    });
    it('can getFulfillableItems()', () => {
        const spy = jest.spyOn(userMock, 'getFulfillableItems');
        user_1.default.getFulfillableItems('acp');
        expect(spy).toBeCalledTimes(1);
    });
    it('can off()', () => {
        const spy = jest.spyOn(userMock, 'off');
        // action
        user_1.default.off('change:imsOrg', handler),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:imsOrg', handler);
    });
    it('can on()', () => {
        const spy = jest.spyOn(userMock, 'on');
        // action
        user_1.default.on('change:tenant', handler);
        // verify
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:tenant', handler);
    });
    it('can call authExpired', () => {
        const user = Global_1.default['exc-module-runtime'].user();
        const authExpiredSpy = jest.spyOn(user, 'authExpired');
        user.authExpired();
        expect(authExpiredSpy).toBeCalledTimes(1);
    });
});
//# sourceMappingURL=user.test.js.map