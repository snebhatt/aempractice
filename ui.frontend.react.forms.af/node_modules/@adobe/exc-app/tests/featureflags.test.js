"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const featureflags_1 = __importDefault(require("../featureflags"));
const Global_1 = __importDefault(require("../src/Global"));
describe('featureflags.ts', () => {
    let getSpy;
    beforeAll(() => {
        const featureflagsMock = { get: jest.fn() };
        Global_1.default['exc-module-runtime'] = { featureFlags: () => featureflagsMock };
        getSpy = jest.spyOn(featureflagsMock, 'get');
    });
    afterEach(() => jest.clearAllMocks());
    it('calls runtime feature flags service', () => __awaiter(void 0, void 0, void 0, function* () {
        getSpy.mockImplementationOnce(() => Promise.resolve({
            cjm: {
                flagA: 'true',
                flagB: 'false'
            }
        }));
        const flags = yield featureflags_1.default.get(['cjm']);
        expect(getSpy).toBeCalledTimes(1);
        expect(getSpy).toBeCalledWith(['cjm']);
        expect(flags).toEqual({
            cjm: {
                flagA: 'true',
                flagB: 'false'
            }
        });
    }));
    it('calls runtime feature flags service with sandbox context options', () => __awaiter(void 0, void 0, void 0, function* () {
        const sandbox = { name: 'cjm-mr' };
        getSpy.mockImplementationOnce(() => Promise.resolve({
            cjm: {
                flagA: 'true',
                flagB: 'false'
            }
        }));
        const flags = yield featureflags_1.default.get({ projectIds: ['cjm'], sandbox });
        expect(getSpy).toBeCalledTimes(1);
        expect(getSpy).toBeCalledWith({ projectIds: ['cjm'], sandbox });
        expect(flags).toEqual({
            cjm: {
                flagA: 'true',
                flagB: 'false'
            }
        });
    }));
});
//# sourceMappingURL=featureflags.test.js.map