"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const Global_1 = __importDefault(require("../src/Global"));
const sidenav_1 = __importDefault(require("../sidenav"));
describe('sidenav.ts', () => {
    const evt = true;
    const handler = () => { };
    const sidenavMock = {
        collapsed: true,
        emit: (type, evt) => {
            return { evt, type };
        },
        get: (param) => {
            return Promise.resolve(param);
        },
        off: (type, handler) => {
            return { handler, type };
        },
        on: (type, handler) => {
            return { handler, type };
        },
        useLeftNavButton: (param) => {
            return param;
        },
        visible: true
    };
    beforeEach(() => {
        Global_1.default['exc-module-runtime'] = {
            sidenav: () => {
                return sidenavMock;
            }
        };
    });
    it('can emit()', () => {
        const spy = jest.spyOn(sidenavMock, 'emit');
        // action
        sidenav_1.default.emit('change:shellSideNavCollapsed', evt),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:shellSideNavCollapsed', evt);
    });
    it('can get()', () => __awaiter(void 0, void 0, void 0, function* () {
        const spy = jest.spyOn(sidenavMock, 'get');
        // action
        yield Promise.all([
            sidenav_1.default.get('shellSideNavCollapsed')
        ]);
        // verify
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('shellSideNavCollapsed');
        // verify getters
        expect(sidenav_1.default.collapsed).toEqual(true);
        expect(sidenav_1.default.visible).toEqual(true);
    }));
    it('can off()', () => {
        const spy = jest.spyOn(sidenavMock, 'off');
        // action
        sidenav_1.default.off('change:shellSideNavCollapsed', handler),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:shellSideNavCollapsed', handler);
    });
    it('can on()', () => {
        const spy = jest.spyOn(sidenavMock, 'on');
        // action
        sidenav_1.default.on('change:shellSideNavCollapsed', handler);
        // verify
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('change:shellSideNavCollapsed', handler);
    });
    it('can useLeftNavButton()', () => {
        const spy = jest.spyOn(sidenavMock, 'useLeftNavButton');
        const config = {
            callback: (isOpen) => console.log('side nav state is now ', isOpen),
            closeOnSelection: false
        };
        // action
        sidenav_1.default.useLeftNavButton(config);
        // verify
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith(config);
    });
});
//# sourceMappingURL=sidenav.test.js.map