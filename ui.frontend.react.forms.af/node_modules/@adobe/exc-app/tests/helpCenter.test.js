"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const Global_1 = __importDefault(require("../src/Global"));
const helpcenter_1 = __importDefault(require("../helpcenter"));
describe('helpCenter/index.js', () => {
    const helpCenterConfig = {
        featured: [{
                href: 'https://feature.com',
                label: 'Adobe Experience Cloud Learn & Support',
                path: '/feature'
            }],
        questions: [
            'Question 1?',
            'Question 2?'
        ],
        recommendations: {
            enabled: true,
            terms: [{
                    path: '/terms',
                    term: 'get started'
                }]
        },
        resources: [{
                href: 'https://marketing.adobe.com/resources/help/en_US/home/index.html',
                label: 'Help Home'
            }]
    };
    beforeEach(() => {
        Global_1.default['exc-module-runtime'] = {
            helpCenter: {
                config: helpCenterConfig,
                open: (config) => {
                    console.log(config); // eslint-disable-line no-console
                },
                setButton: (config) => {
                    console.log(config); // eslint-disable-line no-console
                },
                setButtons: (buttons) => {
                    console.log(buttons); // eslint-disable-line no-console
                },
                setFeedbackConfig: (programs) => {
                    console.log(programs); // eslint-disable-line no-console
                },
                submitJiraFeedback: (feedbackConfig) => {
                    console.log(feedbackConfig); // eslint-disable-line no-console
                }
            }
        };
    });
    it('correctly sets up the connection with module-runtime', () => {
        const setButton = jest.spyOn(Global_1.default['exc-module-runtime'].helpCenter, 'setButton');
        const callbackFn = jest.fn();
        helpcenter_1.default.setButton({ callback: callbackFn, label: 'myButton' });
        expect(setButton).toBeCalledTimes(1);
        const setButtons = jest.spyOn(Global_1.default['exc-module-runtime'].helpCenter, 'setButtons');
        helpcenter_1.default.setButtons([{ callback: callbackFn, id: '1', label: 'myButton' }]);
        expect(setButtons).toBeCalledTimes(1);
        const setFeedbackConfig = jest.spyOn(Global_1.default['exc-module-runtime'].helpCenter, 'setFeedbackConfig');
        helpcenter_1.default.setFeedbackConfig({
            jiraConfigId: 'someid',
            paths: ['/some/path']
        });
        expect(setFeedbackConfig).toBeCalledTimes(1);
        expect(helpcenter_1.default.config).toBe(helpCenterConfig);
        const newConfig = Object.assign(helpCenterConfig, { resources: [{ href: 'https://newlink.com', label: 'NewLink' }] });
        helpcenter_1.default.config = newConfig;
        expect(Global_1.default['exc-module-runtime'].helpCenter.config).toBe(newConfig);
        const openSpy = jest.spyOn(Global_1.default['exc-module-runtime'].helpCenter, 'open');
        helpcenter_1.default.open({
            config: {
                subject: 'Subject',
                type: 'CONTEXTUAL_FEEDBACK_SUBMISSION'
            },
            selectedTab: 'feedback'
        });
        expect(openSpy).toBeCalledTimes(1);
        const submitJiraFeedback = jest.spyOn(Global_1.default['exc-module-runtime'].helpCenter, 'submitJiraFeedback');
        helpcenter_1.default.submitJiraFeedback({
            description: 'Ticket description',
            jiraConfigId: 'someid'
        });
        expect(submitJiraFeedback).toBeCalledTimes(1);
    });
});
//# sourceMappingURL=helpCenter.test.js.map