"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const cache_1 = __importDefault(require("../cache"));
const Global_1 = __importDefault(require("../src/Global"));
describe('cache.ts', () => {
    const getMock = jest.fn();
    const setMock = jest.fn();
    const deleteMock = jest.fn();
    const cacheMock = {
        delete: deleteMock,
        get: getMock,
        set: setMock
    };
    beforeAll(() => {
        Global_1.default['exc-module-runtime'] = {
            cache: () => cacheMock
        };
    });
    afterEach(() => jest.clearAllMocks());
    const cachedItem = {
        createdAt: 1641861111243,
        expiresAt: 1642465911243,
        key: 'key',
        value: { hello: 'world' }
    };
    test('get', () => __awaiter(void 0, void 0, void 0, function* () {
        getMock.mockResolvedValue(cachedItem);
        const entry = yield cache_1.default.get({ key: 'key' });
        expect(entry).toEqual(cachedItem);
        expect(getMock).toHaveBeenCalledTimes(1);
        expect(getMock).toHaveBeenCalledWith({ key: 'key' });
    }));
    test('delete', () => __awaiter(void 0, void 0, void 0, function* () {
        yield cache_1.default.delete({ key: 'key' });
        expect(deleteMock).toHaveBeenCalledTimes(1);
        expect(deleteMock).toHaveBeenCalledWith({ key: 'key' });
    }));
    test('set', () => __awaiter(void 0, void 0, void 0, function* () {
        yield cache_1.default.set({ key: 'key', value: { hello: 'world' } });
        expect(setMock).toHaveBeenCalledTimes(1);
        expect(setMock).toHaveBeenCalledWith({ key: 'key', value: { hello: 'world' } });
    }));
});
//# sourceMappingURL=cache.test.js.map