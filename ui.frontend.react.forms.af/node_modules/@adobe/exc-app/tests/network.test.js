"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const network_1 = require("../network");
const Global_1 = __importDefault(require("../src/Global"));
describe('network.ts', () => {
    const createApolloClientMock = jest.fn();
    const fetchMock = jest.fn();
    const getPrefetchedMock = jest.fn();
    const queryMock = jest.fn();
    const getApolloClientMock = jest.fn();
    const networkMock = {
        createApolloClient: createApolloClientMock,
        fetch: fetchMock,
        getApolloClient: getApolloClientMock,
        getPrefetched: getPrefetchedMock,
        query: queryMock
    };
    beforeAll(() => {
        Global_1.default['exc-module-runtime'] = {
            network: networkMock
        };
    });
    afterEach(() => jest.clearAllMocks());
    test('fetch', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = { status: 'ok' };
        fetchMock.mockResolvedValue(res);
        const result = yield (0, network_1.fetch)('url', { auth: 'Header' });
        expect(result).toEqual(res);
        expect(fetchMock).toHaveBeenCalledTimes(1);
        expect(fetchMock).toHaveBeenCalledWith('url', { auth: 'Header' });
    }));
    test('getPrefetched', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = { status: 'ok' };
        getPrefetchedMock.mockResolvedValue(res);
        const result = yield (0, network_1.getPrefetched)('key', { createdAfter: 100 });
        expect(result).toEqual(res);
        expect(getPrefetchedMock).toHaveBeenCalledTimes(1);
        expect(getPrefetchedMock).toHaveBeenCalledWith('key', { createdAfter: 100 });
    }));
    test('query', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = { status: 'ok' };
        queryMock.mockResolvedValue(res);
        const result = yield (0, network_1.query)({ data: { query: 'query' } });
        expect(result).toEqual(res);
        expect(queryMock).toHaveBeenCalledTimes(1);
        expect(queryMock).toHaveBeenCalledWith({ data: { query: 'query' } });
    }));
    test('getApolloClient', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = { status: 'ok' };
        getApolloClientMock.mockResolvedValue(res);
        const result = yield (0, network_1.getApolloClient)({ xql: true });
        expect(result).toEqual(res);
        expect(getApolloClientMock).toHaveBeenCalledTimes(1);
        expect(getApolloClientMock).toHaveBeenCalledWith({ xql: true });
    }));
    test('createApolloClient', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = { status: 'ok' };
        createApolloClientMock.mockResolvedValue(res);
        const client = yield createApolloClientMock({}, { xql: true });
        expect(client).toEqual(res);
        expect(createApolloClientMock).toHaveBeenCalledTimes(1);
        expect(createApolloClientMock).toHaveBeenCalledWith({}, { xql: true });
    }));
});
//# sourceMappingURL=network.test.js.map