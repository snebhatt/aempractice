"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const Global_1 = __importDefault(require("../src/Global"));
const modules_1 = __importDefault(require("../modules"));
describe('modules', () => {
    beforeEach(() => {
        const modulesMock = {
            get: () => __awaiter(void 0, void 0, void 0, function* () { return ({ module: { liveVersion: 'version' } }); }),
            getSrcDoc: () => __awaiter(void 0, void 0, void 0, function* () { return 'html'; })
        };
        Global_1.default['exc-module-runtime'] = { modules: () => modulesMock };
    });
    test('get', () => __awaiter(void 0, void 0, void 0, function* () {
        const metadata = yield modules_1.default.get('module');
        expect(metadata).toEqual({ module: { liveVersion: 'version' } });
    }));
    test('getSrcDoc', () => __awaiter(void 0, void 0, void 0, function* () {
        const html = yield modules_1.default.getSrcDoc({ spaName: 'spa' });
        expect(html).toEqual('html');
    }));
});
//# sourceMappingURL=modules.test.js.map