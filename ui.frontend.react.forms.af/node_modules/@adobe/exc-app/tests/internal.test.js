"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const Global_1 = __importDefault(require("../src/Global"));
const internal_1 = require("../internal");
const internalMock = {
    addPoller: jest.fn(),
    clearUser: jest.fn(),
    configureMetrics: jest.fn(),
    configureNetwork: jest.fn(),
    configurePolling: jest.fn(),
    flush: jest.fn(),
    getActivityMonitor: jest.fn(),
    preloadEngine: jest.fn(),
    registerActivityEmitter: jest.fn(),
    removePoller: jest.fn(),
    setApplication: jest.fn(),
    setFilter: jest.fn(),
    setUser: jest.fn(),
    waitForGainsight: jest.fn()
};
describe('internal', () => {
    beforeEach(() => {
        Global_1.default['exc-module-runtime'] = {
            internal: internalMock
        };
    });
    it('correctly sets up the connection with module-runtime', () => __awaiter(void 0, void 0, void 0, function* () {
        const poller = { activeFrequency: 100, inactiveFrequency: 200, name: 'name' };
        const pollerHandle = { handle: 'handle' };
        const metricsConfig = { application: { version: 'version' } };
        const networkConfig = { appId: 'appId' };
        const emitter = { activityEvents: ['event1'] };
        const filterFn = jest.fn();
        internal_1.Internal.addPoller(poller);
        expect(internalMock.addPoller).toHaveBeenCalledWith(poller);
        internal_1.Internal.removePoller(pollerHandle);
        expect(internalMock.removePoller).toHaveBeenCalledWith(pollerHandle);
        internal_1.Internal.getActivityMonitor();
        expect(internalMock.getActivityMonitor).toHaveBeenCalledWith();
        internal_1.Internal.clearUser('version');
        expect(internalMock.clearUser).toHaveBeenCalledWith('version');
        internal_1.Internal.configureMetrics(metricsConfig);
        expect(internalMock.configureMetrics).toHaveBeenCalledWith(metricsConfig);
        internal_1.Internal.configureNetwork(networkConfig);
        expect(internalMock.configureNetwork).toHaveBeenCalledWith(networkConfig);
        internal_1.Internal.configurePolling({});
        expect(internalMock.configurePolling({}));
        internal_1.Internal.flush();
        expect(internalMock.flush).toHaveBeenCalled();
        yield internal_1.Internal.waitForGainsight();
        expect(internalMock.waitForGainsight).toHaveBeenCalled();
        internal_1.Internal.registerActivityEmitter(emitter);
        expect(internalMock.registerActivityEmitter).toHaveBeenCalledWith(emitter);
        internal_1.Internal.setApplication({ id: 'id' });
        expect(internalMock.setApplication).toHaveBeenCalledWith({ id: 'id' });
        internal_1.Internal.setUser({ displayName: 'name' }, 'version');
        expect(internalMock.setUser).toHaveBeenCalledWith({ displayName: 'name' }, 'version');
        internal_1.Internal.setFilter(filterFn);
        expect(internalMock.setFilter).toHaveBeenCalledWith(filterFn);
        internal_1.Internal.preloadEngine();
        expect(internalMock.preloadEngine).toHaveBeenCalled();
    }));
});
//# sourceMappingURL=internal.test.js.map