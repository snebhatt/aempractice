"use strict";
/*************************************************************************
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The Feature Flags API provides feature flag data from LaunchDarkly.
 *
 * To consume this API, add the following import to your code.
 *
 * ```typescript
 * import featureFlags from '@adobe/exc-app/featureflags';
 * ```
 *
 * The default export is an object of type [FeatureFlagsApi](../interfaces/_featureflags_.featureflags.md)
 *
 * API reference: [scroll down](#index)
 *
 * ### Sample code
 *
 * ```typescript
 * import featureFlags from '@adobe/exc-app/featureflags';
 *
 * const featureFlags = await featureFlags.get(['cjm', 'experience-platform']);
 * ```
 *
 * All feature flags can be requested using the key '*'
 * ```typescript
 * import featureFlags from '@adobe/exc-app/featureflags';
 *
 * const featureFlags = await featureFlags.get(['*']);
 *
 * ```
 * In some cases you may want to include context options that are not already
 * included in the current app's active context. For example, requesting feature
 * flags for a project that uses sandboxes from an app that does not.
 *
 * To include options in the request, pass an object with projectIds and the context options.
 *
 * ```typescript
 * import featureFlags from '@adobe/exc-app/featureflags';
 *
 * const sandbox = {name: 'name'};
 * const featureFlags = await featureFlags.get({projectsIds: ['cjm'], sandbox});
 * ```
 *
 * API for fetching app data.
 * @packageDocumentation
 * @module featureflags
 */
const Global_1 = require("./src/Global");
const featureFlags = {
    get: (params) => {
        return (0, Global_1.getImpl)('featureFlags')().get(params);
    }
};
exports.default = featureFlags;
//# sourceMappingURL=featureflags.js.map