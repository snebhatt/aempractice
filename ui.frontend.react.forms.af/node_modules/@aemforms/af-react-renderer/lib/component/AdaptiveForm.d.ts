import { JSXElementConstructor } from 'react';
import { Action, FieldJson, FormModel } from '@aemforms/af-core';
import { FormJson } from '@aemforms/af-core';
import { IntlConfig } from 'react-intl';
import { ChangePayload } from '@aemforms/af-core';
/**
 * The minimum set of translation config that contains messages for all supported locales.
 */
declare type TranslationConfigWithAllMessages = {
    /** Locale */
    locale?: string;
    /** Messages for all supported locales */
    localizationMessages?: Record<string, IntlConfig['messages']>;
};
declare type customEventHandlers = {
    [key: string]: any;
};
declare type InitializeAction = Action & {
    type: 'initialize';
    target: FormModel;
};
declare type FieldChanged = Action & {
    target: FormModel;
    type: 'fieldChanged';
    payload: {
        field: FieldJson;
        changes: ChangePayload;
    };
};
declare type Submit = Action & {
    target: FormModel;
    type: 'submit';
};
declare type AdaptiveFormProps = customEventHandlers & TranslationConfigWithAllMessages & {
    formJson: FormJson;
    onInitialize?: (a: InitializeAction) => any;
    onFieldChanged?: (a: FieldChanged) => any;
    onSubmit?: (a: Submit) => any;
    /** {@link Field.id | field name} to set focus on **/
    focusOn?: string;
    mappings: {
        [key: string]: JSXElementConstructor<any>;
    };
};
declare const AdaptiveForm: (props: AdaptiveFormProps) => JSX.Element;
export default AdaptiveForm;
