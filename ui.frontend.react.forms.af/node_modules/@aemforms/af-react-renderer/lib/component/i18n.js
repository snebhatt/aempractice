"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTranslationMessages = void 0;
const af_core_1 = require("@aemforms/af-core");
const af_core_2 = require("@aemforms/af-core");
const getTranslationMessages = (input) => {
    return Object.keys(input).reduce((acc, curr) => {
        const objValue = input[curr];
        let ret = null;
        if (objValue && objValue instanceof Object) {
            ret = (0, exports.getTranslationMessages)(objValue);
        }
        else if (objValue && objValue instanceof Array) {
            ret = (0, exports.getTranslationMessages)(objValue[0]);
        }
        else {
            const f1 = input;
            if (af_core_2.CUSTOM_PROPS_KEY in f1 && af_core_2.TRANSLATION_ID in f1[af_core_2.CUSTOM_PROPS_KEY]) {
                let idObj = f1[af_core_2.CUSTOM_PROPS_KEY][af_core_2.TRANSLATION_ID];
                ret = af_core_1.translationProps.reduce((a, prop) => {
                    let localRet = {};
                    // only if value exists, add to translation object
                    if (f1[prop] && idObj[prop]) {
                        // in case of array, add each properties in the translation object
                        // for example, enumNames and enum
                        if (f1[prop] instanceof Array) {
                            f1[prop].forEach((item, index) => {
                                let key = `${idObj[prop]}${af_core_2.TRANSLATION_TOKEN}${index}`;
                                // @ts-ignore
                                localRet[key] = {
                                    'id': key,
                                    'defaultMessage': item
                                };
                            });
                        }
                        else {
                            let key = idObj[prop];
                            // @ts-ignore
                            localRet[key] = {
                                'id': key,
                                'defaultMessage': f1[prop]
                            };
                        }
                    }
                    return Object.assign(a, localRet);
                }, {});
            }
        }
        return Object.assign(acc, ret);
    }, {});
};
exports.getTranslationMessages = getTranslationMessages;
