"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePrevious = exports.useFocus = exports.useRuleEngine = void 0;
const FormContext_1 = __importDefault(require("../component/FormContext"));
const react_1 = require("react");
//@ts-ignore
const af_core_1 = require("@aemforms/af-core");
const af_core_2 = require("@aemforms/af-core");
/**
 * Binds the component's state to the Form and dynamically changing it depending upon
 * the rules written for that Field in the Form
 * @param props
 */
const useRuleEngine = function (props) {
    var _a;
    const context = (0, react_1.useContext)(FormContext_1.default);
    const id = props.id;
    const element = (_a = context.form) === null || _a === void 0 ? void 0 : _a.getElement(id);
    // use the state, if an empty controller (like objects outside of form vocab), fallback to props
    const [elementState, setElementState] = (0, react_1.useState)((element === null || element === void 0 ? void 0 : element.getState()) || props);
    (0, react_1.useEffect)(() => {
        const subscription = element === null || element === void 0 ? void 0 : element.subscribe(() => {
            setElementState(element.getState());
        });
        return () => {
            subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
        };
    }, [id]);
    const dispatchChange = (val) => {
        if (!(element === null || element === void 0 ? void 0 : element.isContainer)) {
            element.value = val;
        }
    };
    const dispatchBlur = () => {
        if (!(element === null || element === void 0 ? void 0 : element.isContainer)) {
            const blurAction = new af_core_2.Blur(null);
            element === null || element === void 0 ? void 0 : element.dispatch(blurAction);
        }
    };
    const dispatchClick = () => {
        const clickAction = new af_core_1.Click(null);
        element === null || element === void 0 ? void 0 : element.dispatch(clickAction);
    };
    const dispatchAddItem = (n) => {
        const action = new af_core_1.AddItem(n);
        element === null || element === void 0 ? void 0 : element.dispatch(action);
    };
    const dispatchRemoveItem = (n) => {
        const action = new af_core_1.RemoveItem(n);
        element === null || element === void 0 ? void 0 : element.dispatch(action);
    };
    return [elementState, { dispatchChange, dispatchClick, dispatchAddItem, dispatchRemoveItem, dispatchBlur }];
};
exports.useRuleEngine = useRuleEngine;
// @ts-ignore
const useFocus = function (props) {
    const context = (0, react_1.useContext)(FormContext_1.default);
    const id = props.id;
    const ref = (0, react_1.useRef)(null);
    const setRef = (0, react_1.useCallback)(node => {
        if (ref.current) {
            // Make sure to cleanup any events/references added to the last instance
        }
        if (node) {
            // Check if a node is actually passed. Otherwise node would be null.
            // You can now do what you need to, addEventListeners, measure, etc.
        }
        // Save a reference to the node
        ref.current = node;
    }, []);
    const setFocus = function () {
        // @ts-ignore
        ref.current && ref.current.focus();
    };
    if (context === null || context === void 0 ? void 0 : context.refMap) {
        context.refMap[id] = { 'setFocus': setFocus };
    }
    return [setRef, setFocus];
};
exports.useFocus = useFocus;
/**
 * React hook to get the previous state
 * @param value
 */
const usePrevious = function (value) {
    // The ref object is a generic container whose current property is mutable ...
    // ... and can hold any value, similar to an instance property on a class
    const ref = (0, react_1.useRef)();
    // Store current value in ref
    (0, react_1.useEffect)(() => {
        ref.current = value;
    }, [value]); // Only re-run if value changes
    // Return previous value (happens before update in useEffect above)
    return ref.current;
};
exports.usePrevious = usePrevious;
