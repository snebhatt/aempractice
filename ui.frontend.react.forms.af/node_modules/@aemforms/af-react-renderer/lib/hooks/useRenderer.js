"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRenderer = exports.useFormIntl = exports.translateMessage = void 0;
const af_core_1 = require("@aemforms/af-core");
const react_1 = __importDefault(require("react"));
const react_intl_1 = require("react-intl");
const useRuleEngine_1 = require("./useRuleEngine");
const translateMessage = (obj, formatMessage) => (propName) => {
    var _a, _b, _c, _d;
    // todo: need to handle enumNames in a special manner here
    let value = obj[propName];
    if ((_b = (_a = obj === null || obj === void 0 ? void 0 : obj[af_core_1.CUSTOM_PROPS_KEY]) === null || _a === void 0 ? void 0 : _a[af_core_1.TRANSLATION_ID]) === null || _b === void 0 ? void 0 : _b[propName]) {
        let identifier = (_d = (_c = obj === null || obj === void 0 ? void 0 : obj[af_core_1.CUSTOM_PROPS_KEY]) === null || _c === void 0 ? void 0 : _c[af_core_1.TRANSLATION_ID]) === null || _d === void 0 ? void 0 : _d[propName];
        if (value instanceof Array) {
            value = value.map((x, index) => {
                let tempId = `${identifier}${af_core_1.TRANSLATION_TOKEN}${index}`;
                let temp = formatMessage({ 'id': tempId });
                return temp === tempId ? x : temp;
            });
        }
        else {
            value = obj[propName] ? formatMessage({ 'id': identifier }) : '';
            // if id is the value, fall back to the original value
            if (value === identifier) {
                value = obj[propName];
            }
        }
    }
    return value;
};
exports.translateMessage = translateMessage;
const useFormIntl = function () {
    let obj;
    try {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        obj = (0, react_intl_1.useIntl)();
    }
    catch (e) {
        console.warn('Use Intl Failed. Localization would not work');
        obj = {
            formatMessage: (a) => { return a; }
        };
    }
    return obj;
};
exports.useFormIntl = useFormIntl;
/**
 * Binds the component to the Form element whose state is being provided
 * @param formFieldState  The state of the Field received from Adaptive Form Component
 * @param propsMapper Mapping Field State to Props of the component
 * @param Component The component to render.
 * @param wrap
 */
const useRenderer = function (formFieldState, Component, propsMapper = (a) => a, wrap = false) {
    const [state, handlers] = (0, useRuleEngine_1.useRuleEngine)(formFieldState);
    const i18n = (0, exports.useFormIntl)();
    const [ref] = (0, useRuleEngine_1.useFocus)(formFieldState);
    const res = propsMapper(state, handlers, (0, exports.translateMessage)(state, i18n.formatMessage));
    return (wrap ? (react_1.default.createElement("div", { className: 'field' },
        react_1.default.createElement(Component, Object.assign({}, res, { ref: ref })))) : react_1.default.createElement(Component, Object.assign({}, res, { ref: ref })));
};
exports.useRenderer = useRenderer;
