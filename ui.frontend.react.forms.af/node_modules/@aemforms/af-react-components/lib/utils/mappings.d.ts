/// <reference types="react" />
declare const mappings: {
    'text-input': (props: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    'multiline-input': (props: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    checkbox: (originalProps: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    button: (field: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    panel: (fieldset: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
        initialItems?: number | undefined;
    } & {
        type?: "object" | "array" | undefined;
    } & {
        id: string;
        items: (({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            placeholder?: string | undefined;
        } & {
            readOnly?: boolean | undefined;
            valid?: boolean | undefined;
            default?: any;
            value?: any;
            emptyValue?: "" | "undefined" | "null" | undefined;
        } & {
            id: string;
            ':type': string;
        }) | ({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
            initialItems?: number | undefined;
        } & any))[];
    }) => JSX.Element | null;
    'radio-group': (props: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    'number-input': (props: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    'date-input': (props: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    'drop-down': (originalProps: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    'plain-text': (field: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    'file-input': (originalProps: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    repeater: ({ add, remove, index, handlers }: {
        add: boolean;
        remove: boolean;
        index: number;
        handlers: import("@aemforms/af-react-renderer").Handlers;
    }) => JSX.Element;
    'checkbox-group': (props: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
    'custom:vertical-flex': (fieldset: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
        initialItems?: number | undefined;
    } & {
        type?: "object" | "array" | undefined;
    } & {
        id: string;
        items: (({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            placeholder?: string | undefined;
        } & {
            readOnly?: boolean | undefined;
            valid?: boolean | undefined;
            default?: any;
            value?: any;
            emptyValue?: "" | "undefined" | "null" | undefined;
        } & {
            id: string;
            ':type': string;
        }) | ({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
            initialItems?: number | undefined;
        } & any))[];
    }) => JSX.Element;
    'custom:horizontal-flex': (fieldset: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
        initialItems?: number | undefined;
    } & {
        type?: "object" | "array" | undefined;
    } & {
        id: string;
        items: (({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            placeholder?: string | undefined;
        } & {
            readOnly?: boolean | undefined;
            valid?: boolean | undefined;
            default?: any;
            value?: any;
            emptyValue?: "" | "undefined" | "null" | undefined;
        } & {
            id: string;
            ':type': string;
        }) | ({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
            initialItems?: number | undefined;
        } & any))[];
    }) => JSX.Element;
    'custom:vertical-tab': (fieldset: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
        initialItems?: number | undefined;
    } & {
        type?: "object" | "array" | undefined;
    } & {
        id: string;
        items: (({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            placeholder?: string | undefined;
        } & {
            readOnly?: boolean | undefined;
            valid?: boolean | undefined;
            default?: any;
            value?: any;
            emptyValue?: "" | "undefined" | "null" | undefined;
        } & {
            id: string;
            ':type': string;
        }) | ({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
            initialItems?: number | undefined;
        } & any))[];
    }) => JSX.Element;
    'custom:horizontal-tab': (fieldset: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
        initialItems?: number | undefined;
    } & {
        type?: "object" | "array" | undefined;
    } & {
        id: string;
        items: (({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            placeholder?: string | undefined;
        } & {
            readOnly?: boolean | undefined;
            valid?: boolean | undefined;
            default?: any;
            value?: any;
            emptyValue?: "" | "undefined" | "null" | undefined;
        } & {
            id: string;
            ':type': string;
        }) | ({
            description?: string | undefined;
        } & import("@aemforms/af-core").RulesJson & {
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
        } & {
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
        } & {
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("@aemforms/af-core").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
        } & {
            items: (import("@aemforms/af-core").FieldJson | import("@aemforms/af-core").ContainerJson)[];
            initialItems?: number | undefined;
        } & any))[];
    }) => JSX.Element;
    'password-input': (props: {
        description?: string | undefined;
    } & import("@aemforms/af-core").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("@aemforms/af-core").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("@aemforms/af-core").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        placeholder?: string | undefined;
    } & {
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
    } & {
        id: string;
        ':type': string;
    }) => JSX.Element;
};
export default mappings;
