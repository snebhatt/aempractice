import { Action, ContainerJson, ContainerModel, FieldJson, FieldModel, FieldsetJson, FieldsetModel, RulesJson } from './types';
import Scriptable from './Scriptable';
import DataGroup from './data/DataGroup';
/**
 * Defines a generic container class which any form container should extend from.
 * @typeparam T type of the node which extends {@link ContainerJson} and {@link RulesJson}
 */
declare abstract class Container<T extends ContainerJson & RulesJson> extends Scriptable<T> implements ContainerModel {
    protected _children: Array<FieldModel | FieldsetModel>;
    protected _childrenReference: any;
    private _itemTemplate;
    protected _jsonModel: T & {
        id: string;
        items: Array<FieldJson & {
            id: string;
        } | ContainerJson & {
            id: string;
        }>;
    };
    /**
     * @private
     */
    ruleNodeReference(): any;
    get items(): (FieldModel | FieldsetModel)[];
    set maxItems(m: number);
    /**
     * returns whether the items in the Panel can repeat or not
     */
    hasDynamicItems(): boolean;
    get isContainer(): boolean;
    /**
     * Returns the current container state
     */
    getState(): T & {
        ':type': string;
        items: ({
            description?: string | undefined;
            rules?: import("./types").Items<string> | undefined;
            events?: import("./types").Items<string | string[] | undefined> | undefined;
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
            dataRef?: string | null | undefined;
            ':type': string;
            label?: import("./types").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("./types").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
            placeholder?: string | undefined;
            readOnly?: boolean | undefined;
            valid?: boolean | undefined;
            default?: any;
            value?: any;
            emptyValue?: "" | "undefined" | "null" | undefined;
            id: string;
        } | {
            description?: string | undefined;
            rules?: import("./types").Items<string> | undefined;
            events?: import("./types").Items<string | string[] | undefined> | undefined;
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: "object" | "array" | undefined;
            validationExpression?: string | undefined;
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("./types").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("./types").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
            items: (FieldJson | ContainerJson)[] & (({
                description?: string | undefined;
            } & RulesJson & {
                enumNames?: string[] | undefined;
                enum?: any[] | undefined;
            } & {
                accept?: string[] | undefined;
                enforceEnum?: boolean | undefined;
                exclusiveMinimum?: number | undefined;
                exclusiveMaximum?: number | undefined;
                format?: string | undefined;
                maxFileSize?: string | number | undefined;
                maxLength?: number | undefined;
                maximum?: number | undefined;
                maxItems?: number | undefined;
                minLength?: number | undefined;
                minimum?: number | undefined;
                minItems?: number | undefined;
                pattern?: string | undefined;
                required?: boolean | undefined;
                step?: number | undefined;
                type?: string | undefined;
                validationExpression?: string | undefined;
            } & {
                dataRef?: string | null | undefined;
                ':type'?: string | undefined;
                label?: import("./types").Label | undefined;
                enabled?: boolean | undefined;
                visible?: boolean | undefined;
                name?: string | undefined;
                constraintMessages?: import("./types").ConstraintsMessages | undefined;
                fieldType?: string | undefined;
                errorMessage?: string | undefined;
                properties?: {
                    [key: string]: any;
                } | undefined;
            } & {
                placeholder?: string | undefined;
            } & {
                readOnly?: boolean | undefined;
                valid?: boolean | undefined;
                default?: any;
                value?: any;
                emptyValue?: "" | "undefined" | "null" | undefined;
            } & {
                id: string;
                ':type': string;
            }) | ({
                description?: string | undefined;
            } & RulesJson & {
                enumNames?: string[] | undefined;
                enum?: any[] | undefined;
            } & {
                accept?: string[] | undefined;
                enforceEnum?: boolean | undefined;
                exclusiveMinimum?: number | undefined;
                exclusiveMaximum?: number | undefined;
                format?: string | undefined;
                maxFileSize?: string | number | undefined;
                maxLength?: number | undefined;
                maximum?: number | undefined;
                maxItems?: number | undefined;
                minLength?: number | undefined;
                minimum?: number | undefined;
                minItems?: number | undefined;
                pattern?: string | undefined;
                required?: boolean | undefined;
                step?: number | undefined;
                type?: string | undefined;
                validationExpression?: string | undefined;
            } & {
                dataRef?: string | null | undefined;
                ':type'?: string | undefined;
                label?: import("./types").Label | undefined;
                enabled?: boolean | undefined;
                visible?: boolean | undefined;
                name?: string | undefined;
                constraintMessages?: import("./types").ConstraintsMessages | undefined;
                fieldType?: string | undefined;
                errorMessage?: string | undefined;
                properties?: {
                    [key: string]: any;
                } | undefined;
            } & {
                items: (FieldJson | ContainerJson)[];
                initialItems?: number | undefined;
            } & {
                id: string;
                items: (({
                    description?: string | undefined;
                } & RulesJson & {
                    enumNames?: string[] | undefined;
                    enum?: any[] | undefined;
                } & {
                    accept?: string[] | undefined;
                    enforceEnum?: boolean | undefined;
                    exclusiveMinimum?: number | undefined;
                    exclusiveMaximum?: number | undefined;
                    format?: string | undefined;
                    maxFileSize?: string | number | undefined;
                    maxLength?: number | undefined;
                    maximum?: number | undefined;
                    maxItems?: number | undefined;
                    minLength?: number | undefined;
                    minimum?: number | undefined;
                    minItems?: number | undefined;
                    pattern?: string | undefined;
                    required?: boolean | undefined;
                    step?: number | undefined;
                    type?: string | undefined;
                    validationExpression?: string | undefined;
                } & {
                    dataRef?: string | null | undefined;
                    ':type'?: string | undefined;
                    label?: import("./types").Label | undefined;
                    enabled?: boolean | undefined;
                    visible?: boolean | undefined;
                    name?: string | undefined;
                    constraintMessages?: import("./types").ConstraintsMessages | undefined;
                    fieldType?: string | undefined;
                    errorMessage?: string | undefined;
                    properties?: {
                        [key: string]: any;
                    } | undefined;
                } & {
                    placeholder?: string | undefined;
                } & {
                    readOnly?: boolean | undefined;
                    valid?: boolean | undefined;
                    default?: any;
                    value?: any;
                    emptyValue?: "" | "undefined" | "null" | undefined;
                } & {
                    id: string;
                    ':type': string;
                }) | ({
                    description?: string | undefined;
                } & RulesJson & {
                    enumNames?: string[] | undefined;
                    enum?: any[] | undefined;
                } & {
                    accept?: string[] | undefined;
                    enforceEnum?: boolean | undefined;
                    exclusiveMinimum?: number | undefined;
                    exclusiveMaximum?: number | undefined;
                    format?: string | undefined;
                    maxFileSize?: string | number | undefined;
                    maxLength?: number | undefined;
                    maximum?: number | undefined;
                    maxItems?: number | undefined;
                    minLength?: number | undefined;
                    minimum?: number | undefined;
                    minItems?: number | undefined;
                    pattern?: string | undefined;
                    required?: boolean | undefined;
                    step?: number | undefined;
                    type?: string | undefined;
                    validationExpression?: string | undefined;
                } & {
                    dataRef?: string | null | undefined;
                    ':type'?: string | undefined;
                    label?: import("./types").Label | undefined;
                    enabled?: boolean | undefined;
                    visible?: boolean | undefined;
                    name?: string | undefined;
                    constraintMessages?: import("./types").ConstraintsMessages | undefined;
                    fieldType?: string | undefined;
                    errorMessage?: string | undefined;
                    properties?: {
                        [key: string]: any;
                    } | undefined;
                } & {
                    items: (FieldJson | ContainerJson)[];
                    initialItems?: number | undefined;
                } & any))[];
            }))[];
            initialItems?: number | undefined;
            id: string;
        })[];
        id: string;
    };
    protected abstract _createChild(child: FieldsetJson | FieldJson): FieldModel | FieldsetModel;
    private _addChildToRuleNode;
    private _addChild;
    indexOf(f: FieldModel | FieldsetModel): number;
    /**
     * @private
     */
    defaultDataModel(name: string): DataGroup | undefined;
    /**
     * @private
     */
    _initialize(): void;
    /**
     * @private
     */
    addItem(action: Action): void;
    /**
     * @private
     */
    removeItem(action: Action): void;
    /**
     * @private
     */
    queueEvent(action: Action): void;
    validate(): import("./types").ValidationError[];
    /**
     * @private
     */
    dispatch(action: Action): void;
    /**
     * @private
     */
    importData(contextualDataModel?: DataGroup): void;
    /**
     * prefill the form with data on the given element
     * @param dataModel
     * @param contextualDataModel
     * @param operation
     * @private
     */
    syncDataAndFormModel(contextualDataModel?: DataGroup): void;
}
export default Container;
