"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataURItoBlob = exports.IdGenerator = exports.sizeToBytes = exports.getFileSizeInBytes = exports.getAttachments = exports.isEmpty = exports.randomWord = void 0;
/**
 * Defines generic utilities to interact with form runtime model
 */
const JsonUtils_1 = require("./JsonUtils");
const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'.split('');
const fileSizeRegex = /^(\d*\.?\d+)(\\?(?=[KMGT])([KMGT])(?:i?B)?|B?)$/i;
/**
 * Utility to generate a random word from seed
 * @param l seed value
 * @returns random word
 */
const randomWord = (l) => {
    const ret = [];
    for (let i = 0; i <= l; i++) {
        const randIndex = Math.floor(Math.random() * (chars.length));
        ret.push(chars[randIndex]);
    }
    return ret.join('');
};
exports.randomWord = randomWord;
/**
 * Utility to check if the value is empty
 * @param value value
 * @returns `true` if value is empty, `false` otherwise
 */
const isEmpty = (value) => {
    return value === '' || value === null || value === undefined;
};
exports.isEmpty = isEmpty;
/**
 * @param input
 * @private
 */
const getAttachments = (input) => {
    const items = input.items || [];
    return items === null || items === void 0 ? void 0 : items.reduce((acc, item) => {
        let ret = null;
        if (item.isContainer) {
            ret = (0, exports.getAttachments)(item);
        }
        else {
            if ((0, JsonUtils_1.isFile)(item.getState())) {
                ret = {}; // @ts-ignore
                const name = item.name || '';
                const dataRef = (item.dataRef != null)
                    ? item.dataRef
                    : (name.length > 0 ? item.name : undefined);
                //@ts-ignore
                if (item.value instanceof Array) {
                    // @ts-ignore
                    ret[item.id] = item.value.map((x) => {
                        return Object.assign(Object.assign({}, x), { 'dataRef': dataRef });
                    });
                }
                else if (item.value != null) {
                    // @ts-ignore
                    ret[item.id] = Object.assign(Object.assign({}, item.value), { 'dataRef': dataRef });
                }
            }
        }
        return Object.assign(acc, ret);
    }, {});
};
exports.getAttachments = getAttachments;
/**
 * Converts file size in string to bytes based on IEC specification
 * @param str   file size
 * @returns file size as bytes (in kb) based on IEC specification
 */
const getFileSizeInBytes = (str) => {
    let retVal = 0;
    if (typeof str === 'string') {
        const matches = fileSizeRegex.exec(str.trim());
        if (matches != null) {
            retVal = (0, exports.sizeToBytes)(parseFloat(matches[1]), (matches[2] || 'kb').toUpperCase());
        }
    }
    return retVal;
};
exports.getFileSizeInBytes = getFileSizeInBytes;
/**
 * Converts number to bytes based on the symbol as per IEC specification
 * @param size      size as number
 * @param symbol    symbol to use (for example, kb, mb, gb or tb)
 * @returns number as bytes based on the symbol
 */
const sizeToBytes = (size, symbol) => {
    const sizes = { 'KB': 1, 'MB': 2, 'GB': 3, 'TB': 4 };
    // @ts-ignore
    const i = Math.pow(1024, sizes[symbol]);
    return Math.round(size * i);
};
exports.sizeToBytes = sizeToBytes;
/**
 * ID Generator
 * @param initial
 * @constructor
 * @private
 */
const IdGenerator = function* (initial = 50) {
    const initialize = function () {
        const arr = [];
        for (let i = 0; i < initial; i++) {
            arr.push((0, exports.randomWord)(10));
        }
        return arr;
    };
    const passedIds = {};
    let ids = initialize();
    do {
        let x = ids.pop();
        while (x in passedIds) {
            if (ids.length === 0) {
                ids = initialize();
            }
            x = ids.pop();
        }
        passedIds[x] = true;
        yield ids.pop();
        if (ids.length === 0) {
            ids = initialize();
        }
    } while (ids.length > 0);
};
exports.IdGenerator = IdGenerator;
/**
 * Utility to convert data URI to a `blob` object
 * @param dataURI uri to convert to blob
 * @returns `Blob` object for the data URI
 */
const dataURItoBlob = (dataURI) => {
    // Split metadata from data
    const splitted = dataURI.split(',');
    // Split params
    const params = splitted[0].split(';');
    // Get mime-type from params
    const type = params[0].replace('data:', '');
    // Filter the name property from params
    const properties = params.filter(param => {
        return param.split('=')[0] === 'name';
    });
    // Look for the name and use unknown if no name property.
    let name;
    if (properties.length !== 1) {
        name = 'unknown';
    }
    else {
        // Because we filtered out the other property,
        // we only have the name case here.
        name = properties[0].split('=')[1];
    }
    // Built the Uint8Array Blob parameter from the base64 string.
    const binary = atob(splitted[1]);
    const array = [];
    for (let i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
    }
    // Create the blob object
    const blob = new window.Blob([new Uint8Array(array)], { type });
    return { blob, name };
};
exports.dataURItoBlob = dataURItoBlob;
