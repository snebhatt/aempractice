"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonString = exports.checkIfKeyAdded = exports.deepClone = exports.isCheckboxGroup = exports.isCheckbox = exports.checkIfConstraintsArePresent = exports.isFile = exports.getProperty = void 0;
/**
 * Defines generic utilities to interact with form model definition which is represented as json
 */
const types_1 = require("../types");
const SchemaUtils_1 = require("./SchemaUtils");
/**
 * Get the property value form the json
 * @param data      object as json
 * @param key       name of the key
 * @param def       default value
 * @typeParam P     type for the default value
 */
const getProperty = (data, key, def) => {
    if (key in data) {
        return data[key];
    }
    else if (!key.startsWith(':')) {
        const prefixedKey = `:${key}`;
        if (prefixedKey in data) {
            return data[prefixedKey];
        }
    }
    return def;
};
exports.getProperty = getProperty;
/**
 * Checks if the input item provided is a form file attachment field
 * @param item  input item it could be {@link FieldsetJson | Fieldset} or {@link FieldJson | Field}
 * @returns `true` if `item` is a form file attachment, `false` otherwise
 */
const isFile = function (item) {
    return ((item === null || item === void 0 ? void 0 : item.type) === 'file' || (item === null || item === void 0 ? void 0 : item.type) === 'file[]') ||
        (((item === null || item === void 0 ? void 0 : item.type) === 'string' || (item === null || item === void 0 ? void 0 : item.type) === 'string[]') &&
            ((item === null || item === void 0 ? void 0 : item.format) === 'binary' || (item === null || item === void 0 ? void 0 : item.format) === 'data-url'));
};
exports.isFile = isFile;
/**
 * Utility to check if the given form field has any data constraints
 * @param item form field to check
 * @returns `true` if `item` has data constraints, `false` otherwise
 */
const checkIfConstraintsArePresent = function (item) {
    // @ts-ignore
    return types_1.constraintProps.some(cp => item[cp] !== undefined);
};
exports.checkIfConstraintsArePresent = checkIfConstraintsArePresent;
/**
 * Checks if the input item provided is a form check box field
 * @param item  input item it could be {@link FieldsetJson | Fieldset} or {@link FieldJson | Field}
 * @returns `true` if `item` is a form check box, `false` otherwise
 */
const isCheckbox = function (item) {
    const fieldType = (item === null || item === void 0 ? void 0 : item.fieldType) || (0, SchemaUtils_1.defaultFieldTypes)(item);
    return fieldType === 'checkbox';
};
exports.isCheckbox = isCheckbox;
/**
 * Checks if the input item provided is a form check box group field
 * @param item  input item it could be {@link FieldsetJson | Fieldset} or {@link FieldJson | Field}
 * @returns `true` if `item` is a form check box group, `false` otherwise
 */
const isCheckboxGroup = function (item) {
    const fieldType = (item === null || item === void 0 ? void 0 : item.fieldType) || (0, SchemaUtils_1.defaultFieldTypes)(item);
    return fieldType === 'checkbox-group';
};
exports.isCheckboxGroup = isCheckboxGroup;
/**
 * Clones an object completely including any nested objects or arrays
 * @param obj
 * @private
 */
function deepClone(obj) {
    let result;
    if (obj instanceof Array) {
        result = [];
        result = obj.map(x => deepClone(x));
    }
    else if (typeof obj === 'object' && obj !== null) {
        result = {};
        Object.entries(obj).forEach(([key, value]) => {
            result[key] = deepClone(value);
        });
    }
    else {
        result = obj;
    }
    return result;
}
exports.deepClone = deepClone;
/**
 * Checks if the key got added in current object
 * @param currentObj
 * @param prevObj
 * @param objKey
 */
function checkIfKeyAdded(currentObj, prevObj, objKey) {
    if (currentObj != null && prevObj != null) {
        // add the new key
        const newPrvObj = Object.assign({}, prevObj);
        newPrvObj[objKey] = currentObj[objKey];
        // do compare using json stringify
        const newJsonStr = (0, exports.jsonString)(currentObj).replace((0, exports.jsonString)(newPrvObj), '');
        return newJsonStr === '';
    }
    else {
        return false;
    }
}
exports.checkIfKeyAdded = checkIfKeyAdded;
/**
 * Prettifies obj as json string
 * @param obj object to prettify
 * @return json string
 */
const jsonString = (obj) => {
    return JSON.stringify(obj, null, 2);
};
exports.jsonString = jsonString;
