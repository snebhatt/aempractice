import { ContainerModel } from '../types';
/**
 * Utility to generate a random word from seed
 * @param l seed value
 * @returns random word
 */
export declare const randomWord: (l: number) => string;
/**
 * Utility to check if the value is empty
 * @param value value
 * @returns `true` if value is empty, `false` otherwise
 */
export declare const isEmpty: (value: any) => boolean;
/**
 * @param input
 * @private
 */
export declare const getAttachments: (input: ContainerModel) => any;
/**
 * Converts file size in string to bytes based on IEC specification
 * @param str   file size
 * @returns file size as bytes (in kb) based on IEC specification
 */
export declare const getFileSizeInBytes: (str: any) => number;
/**
 * Converts number to bytes based on the symbol as per IEC specification
 * @param size      size as number
 * @param symbol    symbol to use (for example, kb, mb, gb or tb)
 * @returns number as bytes based on the symbol
 */
export declare const sizeToBytes: (size: number, symbol: string) => number;
/**
 * ID Generator
 * @param initial
 * @constructor
 * @private
 */
export declare const IdGenerator: (initial?: number) => Generator<string, void, string>;
/**
 * Utility to convert data URI to a `blob` object
 * @param dataURI uri to convert to blob
 * @returns `Blob` object for the data URI
 */
export declare const dataURItoBlob: (dataURI: string) => {
    blob: Blob;
    name: string;
};
