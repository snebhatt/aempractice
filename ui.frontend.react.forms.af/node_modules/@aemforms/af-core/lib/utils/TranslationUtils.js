"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTranslationObject = exports.createTranslationObj = exports.addTranslationId = exports.invalidateTranslation = exports.CUSTOM_PROPS_KEY = exports.TRANSLATION_ID = exports.TRANSLATION_TOKEN = void 0;
/**
 * Defines generic utilities to translated form model definition
 */
// todo: The API's defined in this file could move to a different package later on
const types_1 = require("../types");
/** Token used while creating translation specific properties from `adaptive form specification` */
exports.TRANSLATION_TOKEN = '##';
/** Name of the object which holds all translation specific properties */
exports.TRANSLATION_ID = 'afs:translationIds';
exports.CUSTOM_PROPS_KEY = 'properties';
const defaultBcp47LangTags = [
    'de-DE',
    'en-US',
    'es-ES',
    'fr-FR',
    'it-IT',
    'ja-JP',
    'ko-KR',
    'pt-BR',
    'zh-CN',
    'zh-TW'
];
/**
 * @private
 */
const invalidateTranslation = (input, updates) => {
    types_1.translationProps.forEach((prop) => {
        var _a, _b, _c, _d;
        if (prop in updates && ((_b = (_a = input === null || input === void 0 ? void 0 : input[exports.CUSTOM_PROPS_KEY]) === null || _a === void 0 ? void 0 : _a[exports.TRANSLATION_ID]) === null || _b === void 0 ? void 0 : _b[prop])) {
            (_d = (_c = input === null || input === void 0 ? void 0 : input[exports.CUSTOM_PROPS_KEY]) === null || _c === void 0 ? void 0 : _c[exports.TRANSLATION_ID]) === null || _d === void 0 ? true : delete _d[prop];
        }
    });
};
exports.invalidateTranslation = invalidateTranslation;
/**
 * @private
 */
const addTranslationId = (input, additionalTranslationProps = []) => {
    // don't create a schema copy, add it to the existing
    const model = input;
    const transProps = [...types_1.translationProps, ...additionalTranslationProps];
    _createTranslationId(model, '', transProps);
    return model;
};
exports.addTranslationId = addTranslationId;
/**
 * @private
 */
const _createTranslationId = (input, path, transProps) => {
    Object.entries(input).forEach(([key, value]) => {
        if (typeof value == 'object') {
            _createTranslationId(value, ((key === 'items') ? path : `${path === '' ? path : path + exports.TRANSLATION_TOKEN}${key}${exports.TRANSLATION_TOKEN}${Math.floor(Math.random() * 10000) + 1}`), transProps);
        }
        else {
            // set it only if either of type or fieldType properties is present
            if ('type' in input ||
                'fieldType' in input) {
                for (const transProp of transProps) {
                    // if property exist add it
                    if (input[transProp] != null) {
                        // if translation id is not yet set, set it
                        if (!(exports.CUSTOM_PROPS_KEY in input)) {
                            input[exports.CUSTOM_PROPS_KEY] = {};
                        }
                        if (!(exports.TRANSLATION_ID in input[exports.CUSTOM_PROPS_KEY])) {
                            input[exports.CUSTOM_PROPS_KEY][exports.TRANSLATION_ID] = {};
                        }
                        // if transprop is not yet set, set it
                        // this is done to prevent overwrite
                        if (!(transProp in input[exports.CUSTOM_PROPS_KEY][exports.TRANSLATION_ID])) {
                            input[exports.CUSTOM_PROPS_KEY][exports.TRANSLATION_ID][transProp] = `${path}${exports.TRANSLATION_TOKEN}${transProp}${exports.TRANSLATION_TOKEN}${Math.floor(Math.random() * 10000) + 1}`;
                        }
                    }
                }
            }
        }
    });
};
/**
 * @param input
 * @param translationObj
 * @param translationProps
 * @private
 */
const _createTranslationObj = (input, translationObj, translationProps) => {
    Object.values(input).forEach((value) => {
        var _a, _b;
        if (typeof value == 'object') {
            _createTranslationObj(value, translationObj, translationProps);
        }
        else {
            for (const translationProp of translationProps) {
                if (translationProp in input && ((_b = (_a = input === null || input === void 0 ? void 0 : input[exports.CUSTOM_PROPS_KEY]) === null || _a === void 0 ? void 0 : _a[exports.TRANSLATION_ID]) === null || _b === void 0 ? void 0 : _b[translationProp])) {
                    // todo: right now we create only for english
                    if (input[translationProp] instanceof Array) {
                        input[translationProp].forEach((item, index) => {
                            if (typeof item === 'string') { // only if string, then convert, since values can also be boolean
                                // @ts-ignore
                                translationObj[`${input[exports.CUSTOM_PROPS_KEY][exports.TRANSLATION_ID][translationProp]}${exports.TRANSLATION_TOKEN}${index}`] = item;
                            }
                        });
                    }
                    else {
                        // @ts-ignore
                        translationObj[`${input[exports.CUSTOM_PROPS_KEY][exports.TRANSLATION_ID][translationProp]}`] = input[translationProp];
                    }
                }
            }
        }
    });
};
/**
 * @param input
 * @param additionalTranslationProps
 * @private
 */
const createTranslationObj = (input, additionalTranslationProps = []) => {
    const obj = {};
    const transProps = [...types_1.translationProps, ...additionalTranslationProps];
    _createTranslationObj(input, obj, transProps);
    return obj;
};
exports.createTranslationObj = createTranslationObj;
/**
 * Creates translation object with [BCP 47](https://tools.ietf.org/search/bcp47) language tags as key and value is a translation object. Key of translation object is
 * generated based on the form hierarchy and it is separated by "##" token to signify that the id is machine generated (ie its not a human generated string)
 * @param input             form model definition
 * @param additionalTranslationProps    optional properties which needs to be translated, by default, only OOTB properties of form model definition is translated
 * @param bcp47LangTags     optional additional language tags
 * @returns translation object for each bcp 47 language tag
 */
const createTranslationObject = (input, additionalTranslationProps = [], bcp47LangTags = []) => {
    const transProps = [...types_1.translationProps, ...additionalTranslationProps];
    // create a copy of the input
    const inputCopy = JSON.parse(JSON.stringify(input));
    const obj = (0, exports.createTranslationObj)((0, exports.addTranslationId)(inputCopy), transProps);
    const langTags = [...defaultBcp47LangTags, ...bcp47LangTags];
    const allLangs = {};
    for (const langTag of langTags) {
        // todo: added temporarily to test
        // todo: need to fix this as per machine translation
        allLangs[langTag] = JSON.parse(JSON.stringify(obj));
    }
    return [inputCopy, allLangs];
};
exports.createTranslationObject = createTranslationObject;
