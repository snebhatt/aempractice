/** Validation result type **/
declare type ValidationResult = {
    valid: boolean;
    value: any;
};
export declare const isDataUrl: (str: string) => boolean;
export declare const ValidConstraints: {
    date: string[];
    string: string[];
    number: string[];
    array: string[];
    file: string[];
};
/**
 * Implementation of all constraints defined by `adaptive form specification`
 */
export declare const Constraints: {
    /**
     * Implementation of type constraint
     * @param constraint    `type` property of the form object
     * @param inputVal      value of the form object
     * @return {@link ValidationResult | validation result}
     */
    type: (constraint: string, inputVal: any) => ValidationResult;
    /**
     * Implementation of format constraint
     * @param constraint    `format` property of the form object
     * @param input         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    format: (constraint: string, input: string | null) => {
        value: string | null;
        valid: boolean;
    };
    /**
     * Implementation of minimum constraint
     * @param constraint    `minimum` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    minimum: (constraint: number, value: number) => {
        valid: boolean;
        value: number;
    };
    /**
     * Implementation of maximum constraint
     * @param constraint    `maximum` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    maximum: (constraint: number, value: number) => {
        valid: boolean;
        value: number;
    };
    /**
     * Implementation of exclusiveMinimum constraint
     * @param constraint    `minimum` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    exclusiveMinimum: (constraint: number, value: number) => {
        valid: boolean;
        value: number;
    };
    /**
     * Implementation of exclusiveMaximum constraint
     * @param constraint    `maximum` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    exclusiveMaximum: (constraint: number, value: number) => {
        valid: boolean;
        value: number;
    };
    /**
     * Implementation of the minItems constraint
     * @param constraint `minItems` constraint from object
     * @param value value of the form object
     */
    minItems: <T>(constraint: number, value: T[]) => {
        valid: boolean;
        value: T[];
    };
    /**
     * Implementation of the maxItems constraint
     * @param constraint `maxItems` constraint from object
     * @param value value of the form object
     */
    maxItems: <T_1>(constraint: number, value: T_1[]) => {
        valid: boolean;
        value: T_1[];
    };
    /**
     * Implementation of the uniqueItems constraint
     * @param constraint `uniqueItems` constraint from object
     * @param value value of the form object
     */
    uniqueItems: <T_2>(constraint: boolean, value: T_2[]) => {
        valid: boolean;
        value: T_2[];
    };
    /**
     * Implementation of minLength constraint
     * @param constraint    `minLength` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    minLength: (constraint: number, value: string) => {
        value: string;
        valid: boolean;
    };
    /**
     * Implementation of maxLength constraint
     * @param constraint    `maxLength` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    maxLength: (constraint: number, value: string) => {
        value: string;
        valid: boolean;
    };
    /**
     * Implementation of pattern constraint
     * @param constraint    `pattern` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    pattern: (constraint: RegExp | string, value: string) => {
        valid: boolean;
        value: string;
    };
    /**
     * Implementation of required constraint
     * @param constraint    `required` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    required: (constraint: boolean, value: any) => {
        valid: boolean;
        value: any;
    };
    /**
     * Implementation of enum constraint
     * @param constraint    `enum` property of the form object
     * @param value         value of the form object
     * @return {@link ValidationResult | validation result}
     */
    enum: (constraint: any[], value: any) => {
        valid: boolean;
        value: any;
    };
};
export {};
