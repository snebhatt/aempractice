/**
 * Defines generic utilities to interact with form model definition which is represented as json
 */
import { FieldsetJson, FieldJson } from '../types';
/**
 * Get the property value form the json
 * @param data      object as json
 * @param key       name of the key
 * @param def       default value
 * @typeParam P     type for the default value
 */
export declare const getProperty: <P>(data: any, key: string, def: P) => P;
/**
 * Checks if the input item provided is a form file attachment field
 * @param item  input item it could be {@link FieldsetJson | Fieldset} or {@link FieldJson | Field}
 * @returns `true` if `item` is a form file attachment, `false` otherwise
 */
export declare const isFile: (item: FieldsetJson | FieldJson) => boolean;
/**
 * Utility to check if the given form field has any data constraints
 * @param item form field to check
 * @returns `true` if `item` has data constraints, `false` otherwise
 */
export declare const checkIfConstraintsArePresent: (item: FieldsetJson | FieldJson) => boolean;
/**
 * Checks if the input item provided is a form check box field
 * @param item  input item it could be {@link FieldsetJson | Fieldset} or {@link FieldJson | Field}
 * @returns `true` if `item` is a form check box, `false` otherwise
 */
export declare const isCheckbox: (item: FieldsetJson | FieldJson) => boolean;
/**
 * Checks if the input item provided is a form check box group field
 * @param item  input item it could be {@link FieldsetJson | Fieldset} or {@link FieldJson | Field}
 * @returns `true` if `item` is a form check box group, `false` otherwise
 */
export declare const isCheckboxGroup: (item: FieldsetJson | FieldJson) => boolean;
/**
 * Clones an object completely including any nested objects or arrays
 * @param obj
 * @private
 */
export declare function deepClone(obj: any): any;
/**
 * Checks if the key got added in current object
 * @param currentObj
 * @param prevObj
 * @param objKey
 */
export declare function checkIfKeyAdded(currentObj: any, prevObj: any, objKey: string): boolean;
/**
 * Prettifies obj as json string
 * @param obj object to prettify
 * @return json string
 */
export declare const jsonString: (obj: any) => string;
