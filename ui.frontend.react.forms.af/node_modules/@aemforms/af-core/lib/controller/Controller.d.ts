/**
 * Defines all form events
 */
import { Action, BaseJson, FieldModel, FieldsetModel, FormModel, ValidationError } from '../types';
/**
 * Implementation of generic event
 * @private
 */
export declare class ActionImpl implements Action {
    private _metadata?;
    protected _type: string;
    private _payload?;
    private _target;
    constructor(payload: any, type: string, _metadata?: any);
    get type(): string;
    get payload(): any;
    get metadata(): any;
    get target(): FormModel | FieldModel | FieldsetModel;
    get isCustomEvent(): boolean;
    protected payloadToJson(): any;
    toJson(): {
        payload: any;
        type: string;
        isCustomEvent: boolean;
    };
    toString(): string;
}
/**
 * Payload of change event
 */
export declare type ChangePayload = {
    /**
     * List of changes
     */
    changes: Array<{
        /**
         * Name of the property which has changed
         */
        propertyName: string;
        /**
         * Previous value of the property changed
         */
        prevValue?: any;
        /**
         * Current value of the property changed
         */
        currentValue: any;
    }>;
};
/**
 * Implementation of `change` event. The change event is triggered on the field whenever the value of the field is changed
 */
export declare class Change extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload: ChangePayload, dispatch?: boolean);
}
/**
 * Implementation of `invalid` event. The invalid event is triggered when a Field’s value becomes invalid after a change event or whenever its value property change
 */
export declare class Invalid extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload?: any);
}
/**
 * Implementation of `valid` event. The valid event is triggered whenever the field’s valid state is changed from invalid to valid.
 */
export declare class Valid extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload?: any);
}
/**
 * Implementation of an ExecuteRule event.
 * @private
 */
export declare class ExecuteRule extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload?: any, dispatch?: boolean);
}
/**
 * Creates a change event
 * @param propertyName  name of the form field property
 * @param currentValue  current value
 * @param prevValue     previous value
 * @returns {@link Change} change event
 */
export declare const propertyChange: (propertyName: string, currentValue: any, prevValue?: any) => Change;
/**
 * Implementation of `initialize` event. The event is triggered on all the fields when the form initialisation is complete
 */
export declare class Initialize extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload?: any, dispatch?: boolean);
}
/**
 * Implementation of `click` event. The event is triggered when user clicks on an element.
 */
export declare class Click extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload?: any, dispatch?: boolean);
}
/**
 * Implementation of `blur` event. The event is triggered when the element loses focus.
 */
export declare class Blur extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload?: any, dispatch?: boolean);
}
/**
 * Implementation of `ValidationComplete` event. The ValidationComplete event is triggered once validation is completed
 * on the form.
 *
 * An example of using this event,
 * ```
 * function onValidationComplete(event) {
 *	 const x = event.payload[0].id;
 *	 // do something with the invalid field
 * }
 * ```
 */
export declare class ValidationComplete extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload (ie) list of {@link ValidationError | validation errors}
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload?: Array<ValidationError>, dispatch?: boolean);
}
/**
 * Implementation of `submit` event. The submit event is triggered on the Form.
 * To trigger the submit event, submit function needs to be invoked or one can invoke dispatchEvent API.
 */
export declare class Submit extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload?: any, dispatch?: boolean);
}
/**
 * Implementation of `fieldChanged` event. The field changed event is triggered on the field which it has changed.
 */
export declare class FieldChanged extends ActionImpl {
    constructor(changes: ChangePayload, field: BaseJson);
}
/**
 * Implementation of `custom event`.
 */
export declare class CustomEvent extends ActionImpl {
    /**
     * @constructor
     * @param [eventName] name of the event
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(eventName: string, payload?: any, dispatch?: boolean);
    /**
     * Defines if the event is custom
     */
    get isCustomEvent(): boolean;
}
/**
 * Implementation of `addItem` event. The event is triggered on a panel to add a new instance of items inside it.
 */
export declare class AddItem extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload?: number);
}
/**
 * Implementation of `removeItem` event. The event is triggered on a panel to remove an instance of items inside it.
 */
export declare class RemoveItem extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload?: number);
}
