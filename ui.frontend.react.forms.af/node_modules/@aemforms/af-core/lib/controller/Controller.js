"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveItem = exports.AddItem = exports.CustomEvent = exports.FieldChanged = exports.Submit = exports.ValidationComplete = exports.Blur = exports.Click = exports.Initialize = exports.propertyChange = exports.ExecuteRule = exports.Valid = exports.Invalid = exports.Change = exports.ActionImpl = void 0;
/**
 * Implementation of generic event
 * @private
 */
class ActionImpl {
    constructor(payload, type, _metadata) {
        this._metadata = _metadata;
        this._payload = payload;
        this._type = type;
    }
    get type() {
        return this._type;
    }
    get payload() {
        return this._payload;
    }
    get metadata() {
        return this._metadata;
    }
    get target() {
        return this._target;
    }
    get isCustomEvent() {
        return false;
    }
    payloadToJson() {
        return this.payload;
    }
    toJson() {
        return {
            payload: this.payloadToJson(),
            type: this.type,
            isCustomEvent: this.isCustomEvent
        };
    }
    toString() {
        return JSON.stringify(this.toJson());
    }
}
exports.ActionImpl = ActionImpl;
/**
 * Implementation of `change` event. The change event is triggered on the field whenever the value of the field is changed
 */
class Change extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload, dispatch = false) {
        super(payload, 'change', { dispatch });
    }
}
exports.Change = Change;
/**
 * Implementation of `invalid` event. The invalid event is triggered when a Field’s value becomes invalid after a change event or whenever its value property change
 */
class Invalid extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload = {}) {
        super(payload, 'invalid', {});
    }
}
exports.Invalid = Invalid;
/**
 * Implementation of `valid` event. The valid event is triggered whenever the field’s valid state is changed from invalid to valid.
 */
class Valid extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload = {}) {
        super(payload, 'valid', {});
    }
}
exports.Valid = Valid;
/**
 * Implementation of an ExecuteRule event.
 * @private
 */
class ExecuteRule extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload = {}, dispatch = false) {
        super(payload, 'executeRule', { dispatch });
    }
}
exports.ExecuteRule = ExecuteRule;
/**
 * Creates a change event
 * @param propertyName  name of the form field property
 * @param currentValue  current value
 * @param prevValue     previous value
 * @returns {@link Change} change event
 */
const propertyChange = (propertyName, currentValue, prevValue) => {
    return new Change({
        changes: [
            {
                propertyName,
                currentValue,
                prevValue
            }
        ]
    });
};
exports.propertyChange = propertyChange;
/**
 * Implementation of `initialize` event. The event is triggered on all the fields when the form initialisation is complete
 */
class Initialize extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload, dispatch = false) {
        super(payload, 'initialize', { dispatch });
    }
}
exports.Initialize = Initialize;
/**
 * Implementation of `click` event. The event is triggered when user clicks on an element.
 */
class Click extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload, dispatch = false) {
        super(payload, 'click', { dispatch });
    }
}
exports.Click = Click;
/**
 * Implementation of `blur` event. The event is triggered when the element loses focus.
 */
class Blur extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload, dispatch = false) {
        super(payload, 'blur', { dispatch });
    }
}
exports.Blur = Blur;
/**
 * Implementation of `ValidationComplete` event. The ValidationComplete event is triggered once validation is completed
 * on the form.
 *
 * An example of using this event,
 * ```
 * function onValidationComplete(event) {
 *	 const x = event.payload[0].id;
 *	 // do something with the invalid field
 * }
 * ```
 */
class ValidationComplete extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload (ie) list of {@link ValidationError | validation errors}
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload, dispatch = false) {
        super(payload, 'validationComplete', { dispatch });
    }
}
exports.ValidationComplete = ValidationComplete;
/**
 * Implementation of `submit` event. The submit event is triggered on the Form.
 * To trigger the submit event, submit function needs to be invoked or one can invoke dispatchEvent API.
 */
class Submit extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(payload, dispatch = false) {
        super(payload, 'submit', { dispatch });
    }
}
exports.Submit = Submit;
/**
 * Implementation of `fieldChanged` event. The field changed event is triggered on the field which it has changed.
 */
class FieldChanged extends ActionImpl {
    constructor(changes, field) {
        super({
            field,
            changes
        }, 'fieldChanged');
    }
}
exports.FieldChanged = FieldChanged;
/**
 * Implementation of `custom event`.
 */
class CustomEvent extends ActionImpl {
    /**
     * @constructor
     * @param [eventName] name of the event
     * @param [payload] event payload
     * @param [dispatch] true to trigger the event on all the fields in DFS order starting from the top level form element, false otherwise
     */
    constructor(eventName, payload = {}, dispatch = false) {
        super(payload, eventName, { dispatch });
    }
    /**
     * Defines if the event is custom
     */
    get isCustomEvent() {
        return true;
    }
}
exports.CustomEvent = CustomEvent;
/**
 * Implementation of `addItem` event. The event is triggered on a panel to add a new instance of items inside it.
 */
class AddItem extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload) {
        super(payload, 'addItem');
    }
}
exports.AddItem = AddItem;
/**
 * Implementation of `removeItem` event. The event is triggered on a panel to remove an instance of items inside it.
 */
class RemoveItem extends ActionImpl {
    /**
     * @constructor
     * @param [payload] event payload
     */
    constructor(payload) {
        super(payload, 'removeItem');
    }
}
exports.RemoveItem = RemoveItem;
