declare type HTTP_VERB = 'GET' | 'POST';
/**
 * Implementation of generic request API. This API can be used to make external web request
 * @param context                   expression execution context(consists of current form, current field, current event)
 * @param uri                       request URI
 * @param httpVerb                  http verb (for example, GET or POST)
 * @param payload                   request payload
 * @param success                   success handler
 * @param error                     error handler
 * @param payloadContentType        content type of the request
 * @private
 */
export declare const request: (context: any, uri: string, httpVerb: HTTP_VERB, payload: any, success: string, error: string, payloadContentType: string) => Promise<void>;
export declare const submit: (context: any, success: string, error: string, submitAs?: 'application/json' | 'multipart/form-data', input_data?: any) => Promise<void>;
/**
 * Implementation of function runtime
 * @private
 */
declare class FunctionRuntimeImpl {
    getFunctions(): {
        validate: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => any;
            _signature: never[];
        };
        getData: {
            _func: (args: unknown, data: unknown, interpreter: any) => any;
            _signature: never[];
        };
        submitForm: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => {};
            _signature: never[];
        };
        request: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => {};
            _signature: never[];
        };
        dispatchEvent: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => {};
            _signature: never[];
        };
    };
}
declare const FunctionRuntime: FunctionRuntimeImpl;
export default FunctionRuntime;
