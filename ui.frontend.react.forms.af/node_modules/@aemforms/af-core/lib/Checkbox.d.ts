import Field from './Field';
/**
 * Implementation of check box runtime model which extends from {@link Field | field} model
 */
declare class Checkbox extends Field {
    private offValue;
    /**
     * @private
     */
    _getConstraintObject(): {
        type: (constraint: string, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        format: (constraint: string, input: string | null) => {
            value: string | null;
            valid: boolean;
        };
        minimum: (constraint: number, value: number) => {
            valid: boolean;
            value: number;
        };
        maximum: (constraint: number, value: number) => {
            valid: boolean;
            value: number;
        };
        exclusiveMinimum: (constraint: number, value: number) => {
            valid: boolean;
            value: number;
        };
        exclusiveMaximum: (constraint: number, value: number) => {
            valid: boolean;
            value: number;
        };
        minItems: <T>(constraint: number, value: T[]) => {
            valid: boolean;
            value: T[];
        };
        maxItems: <T_1>(constraint: number, value: T_1[]) => {
            valid: boolean;
            value: T_1[];
        };
        uniqueItems: <T_2>(constraint: boolean, value: T_2[]) => {
            valid: boolean;
            value: T_2[];
        };
        minLength: (constraint: number, value: string) => {
            value: string;
            valid: boolean;
        };
        maxLength: (constraint: number, value: string) => {
            value: string;
            valid: boolean;
        };
        pattern: (constraint: string | RegExp, value: string) => {
            valid: boolean;
            value: string;
        };
        required: (constraint: boolean, value: any) => {
            valid: boolean;
            value: any;
        };
        enum: (constraint: any[], value: any) => {
            valid: boolean;
            value: any;
        };
    };
    protected _getDefaults(): {
        enforceEnum: boolean;
        readOnly: boolean;
        enabled: boolean;
        visible: boolean;
        type: string | undefined;
    };
    /**
     * Returns the `enum` constraints from the json
     */
    get enum(): any[];
}
export default Checkbox;
