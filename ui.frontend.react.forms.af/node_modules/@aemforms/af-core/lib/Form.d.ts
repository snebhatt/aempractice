import Container from './Container';
import { Action, FieldJson, FieldModel, FieldsetJson, FieldsetModel, FormJson, FormModel, Items } from './types';
import FormMetaData from './FormMetaData';
import EventQueue from './controller/EventQueue';
import RuleEngine from './rules/RuleEngine';
declare type LogFunction = 'info' | 'warn' | 'error';
/**
 * Logging levels.
 */
export declare type LogLevel = 'off' | LogFunction;
/**
 * @private
 */
export declare class Logger {
    info(msg: string): void;
    warn(msg: string): void;
    error(msg: string): void;
    log(msg: string, level: LogFunction): void;
    private logLevel;
    constructor(logLevel?: LogLevel);
}
/**
 * Defines `form model` which implements {@link FormModel | form model}
 */
declare class Form extends Container<FormJson> implements FormModel {
    private _ruleEngine;
    private _eventQueue;
    /**
     * @private
     */
    private _fields;
    /**
     * @private
     */
    _ids: Generator<string, void, string>;
    /**
     * @private
     */
    private _invalidFields;
    private _logger;
    /**
     * @param n
     * @param _ruleEngine
     * @param _eventQueue
     * @param logLevel
     * @private
     */
    constructor(n: FormJson, _ruleEngine: RuleEngine, _eventQueue?: EventQueue, logLevel?: LogLevel);
    get logger(): Logger;
    private dataRefRegex;
    get metaData(): FormMetaData;
    get action(): string | undefined;
    protected _createChild(child: FieldsetJson | FieldJson): FieldModel | FieldsetModel;
    importData(dataModel: any): void;
    exportData(): any;
    /**
     * Returns the current state of the form
     *
     * To access the form data and attachments, one needs to use the `data` and `attachments` property.
     * For example,
     * ```
     * const data = form.getState().data
     * const attachments = form.getState().attachments
     * ```
     */
    getState(): {
        description?: string | undefined;
    } & import("./types").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("./types").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("./types").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
    } & {
        items: (FieldJson | import("./types").ContainerJson)[];
        initialItems?: number | undefined;
    } & {
        metadata?: import("./types").MetaDataJson | undefined;
        data?: any;
        title?: string | undefined;
        action?: string | undefined;
        adaptiveForm?: string | undefined;
    } & {
        ':type': string;
        items: ({
            description?: string | undefined;
            rules?: Items<string> | undefined;
            events?: Items<string | string[] | undefined> | undefined;
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: string | undefined;
            validationExpression?: string | undefined;
            dataRef?: string | null | undefined;
            ':type': string;
            label?: import("./types").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("./types").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
            placeholder?: string | undefined;
            readOnly?: boolean | undefined;
            valid?: boolean | undefined;
            default?: any;
            value?: any;
            emptyValue?: "" | "undefined" | "null" | undefined;
            id: string;
        } | {
            description?: string | undefined;
            rules?: Items<string> | undefined;
            events?: Items<string | string[] | undefined> | undefined;
            enumNames?: string[] | undefined;
            enum?: any[] | undefined;
            accept?: string[] | undefined;
            enforceEnum?: boolean | undefined;
            exclusiveMinimum?: number | undefined;
            exclusiveMaximum?: number | undefined;
            format?: string | undefined;
            maxFileSize?: string | number | undefined;
            maxLength?: number | undefined;
            maximum?: number | undefined;
            maxItems?: number | undefined;
            minLength?: number | undefined;
            minimum?: number | undefined;
            minItems?: number | undefined;
            pattern?: string | undefined;
            required?: boolean | undefined;
            step?: number | undefined;
            type?: "object" | "array" | undefined;
            validationExpression?: string | undefined;
            dataRef?: string | null | undefined;
            ':type'?: string | undefined;
            label?: import("./types").Label | undefined;
            enabled?: boolean | undefined;
            visible?: boolean | undefined;
            name?: string | undefined;
            constraintMessages?: import("./types").ConstraintsMessages | undefined;
            fieldType?: string | undefined;
            errorMessage?: string | undefined;
            properties?: {
                [key: string]: any;
            } | undefined;
            items: (FieldJson | import("./types").ContainerJson)[] & (({
                description?: string | undefined;
            } & import("./types").RulesJson & {
                enumNames?: string[] | undefined;
                enum?: any[] | undefined;
            } & {
                accept?: string[] | undefined;
                enforceEnum?: boolean | undefined;
                exclusiveMinimum?: number | undefined;
                exclusiveMaximum?: number | undefined;
                format?: string | undefined;
                maxFileSize?: string | number | undefined;
                maxLength?: number | undefined;
                maximum?: number | undefined;
                maxItems?: number | undefined;
                minLength?: number | undefined;
                minimum?: number | undefined;
                minItems?: number | undefined;
                pattern?: string | undefined;
                required?: boolean | undefined;
                step?: number | undefined;
                type?: string | undefined;
                validationExpression?: string | undefined;
            } & {
                dataRef?: string | null | undefined;
                ':type'?: string | undefined;
                label?: import("./types").Label | undefined;
                enabled?: boolean | undefined;
                visible?: boolean | undefined;
                name?: string | undefined;
                constraintMessages?: import("./types").ConstraintsMessages | undefined;
                fieldType?: string | undefined;
                errorMessage?: string | undefined;
                properties?: {
                    [key: string]: any;
                } | undefined;
            } & {
                placeholder?: string | undefined;
            } & {
                readOnly?: boolean | undefined;
                valid?: boolean | undefined;
                default?: any;
                value?: any;
                emptyValue?: "" | "undefined" | "null" | undefined;
            } & {
                id: string;
                ':type': string;
            }) | ({
                description?: string | undefined;
            } & import("./types").RulesJson & {
                enumNames?: string[] | undefined;
                enum?: any[] | undefined;
            } & {
                accept?: string[] | undefined;
                enforceEnum?: boolean | undefined;
                exclusiveMinimum?: number | undefined;
                exclusiveMaximum?: number | undefined;
                format?: string | undefined;
                maxFileSize?: string | number | undefined;
                maxLength?: number | undefined;
                maximum?: number | undefined;
                maxItems?: number | undefined;
                minLength?: number | undefined;
                minimum?: number | undefined;
                minItems?: number | undefined;
                pattern?: string | undefined;
                required?: boolean | undefined;
                step?: number | undefined;
                type?: string | undefined;
                validationExpression?: string | undefined;
            } & {
                dataRef?: string | null | undefined;
                ':type'?: string | undefined;
                label?: import("./types").Label | undefined;
                enabled?: boolean | undefined;
                visible?: boolean | undefined;
                name?: string | undefined;
                constraintMessages?: import("./types").ConstraintsMessages | undefined;
                fieldType?: string | undefined;
                errorMessage?: string | undefined;
                properties?: {
                    [key: string]: any;
                } | undefined;
            } & {
                items: (FieldJson | import("./types").ContainerJson)[];
                initialItems?: number | undefined;
            } & {
                id: string;
                items: (({
                    description?: string | undefined;
                } & import("./types").RulesJson & {
                    enumNames?: string[] | undefined;
                    enum?: any[] | undefined;
                } & {
                    accept?: string[] | undefined;
                    enforceEnum?: boolean | undefined;
                    exclusiveMinimum?: number | undefined;
                    exclusiveMaximum?: number | undefined;
                    format?: string | undefined;
                    maxFileSize?: string | number | undefined;
                    maxLength?: number | undefined;
                    maximum?: number | undefined;
                    maxItems?: number | undefined;
                    minLength?: number | undefined;
                    minimum?: number | undefined;
                    minItems?: number | undefined;
                    pattern?: string | undefined;
                    required?: boolean | undefined;
                    step?: number | undefined;
                    type?: string | undefined;
                    validationExpression?: string | undefined;
                } & {
                    dataRef?: string | null | undefined;
                    ':type'?: string | undefined;
                    label?: import("./types").Label | undefined;
                    enabled?: boolean | undefined;
                    visible?: boolean | undefined;
                    name?: string | undefined;
                    constraintMessages?: import("./types").ConstraintsMessages | undefined;
                    fieldType?: string | undefined;
                    errorMessage?: string | undefined;
                    properties?: {
                        [key: string]: any;
                    } | undefined;
                } & {
                    placeholder?: string | undefined;
                } & {
                    readOnly?: boolean | undefined;
                    valid?: boolean | undefined;
                    default?: any;
                    value?: any;
                    emptyValue?: "" | "undefined" | "null" | undefined;
                } & {
                    id: string;
                    ':type': string;
                }) | ({
                    description?: string | undefined;
                } & import("./types").RulesJson & {
                    enumNames?: string[] | undefined;
                    enum?: any[] | undefined;
                } & {
                    accept?: string[] | undefined;
                    enforceEnum?: boolean | undefined;
                    exclusiveMinimum?: number | undefined;
                    exclusiveMaximum?: number | undefined;
                    format?: string | undefined;
                    maxFileSize?: string | number | undefined;
                    maxLength?: number | undefined;
                    maximum?: number | undefined;
                    maxItems?: number | undefined;
                    minLength?: number | undefined;
                    minimum?: number | undefined;
                    minItems?: number | undefined;
                    pattern?: string | undefined;
                    required?: boolean | undefined;
                    step?: number | undefined;
                    type?: string | undefined;
                    validationExpression?: string | undefined;
                } & {
                    dataRef?: string | null | undefined;
                    ':type'?: string | undefined;
                    label?: import("./types").Label | undefined;
                    enabled?: boolean | undefined;
                    visible?: boolean | undefined;
                    name?: string | undefined;
                    constraintMessages?: import("./types").ConstraintsMessages | undefined;
                    fieldType?: string | undefined;
                    errorMessage?: string | undefined;
                    properties?: {
                        [key: string]: any;
                    } | undefined;
                } & {
                    items: (FieldJson | import("./types").ContainerJson)[];
                    initialItems?: number | undefined;
                } & any))[];
            }))[];
            initialItems?: number | undefined;
            id: string;
        })[];
        id: string;
    };
    get type(): string;
    isTransparent(): boolean;
    get form(): FormModel;
    get ruleEngine(): RuleEngine;
    getUniqueId(): string;
    /**
     * @param field
     * @private
     */
    fieldAdded(field: FieldModel | FieldsetModel): void;
    validate(): import("./types").ValidationError[];
    /**
     * Checks if the given form is valid or not
     * @returns `true`, if form is valid, `false` otherwise
     */
    isValid(): boolean;
    /**
     * @param field
     * @private
     */
    dispatch(action: Action): void;
    /**
     * @param action
     * @private
     */
    executeAction(action: Action): void;
    /**
     * @param action
     * @param context
     * @private
     */
    submit(action: Action, context: any): void;
    getElement(id: string): FieldModel | FieldsetModel | this;
    /**
     * @private
     */
    getEventQueue(): EventQueue;
    get name(): string;
    get value(): null;
    get id(): string;
    get title(): string;
}
export default Form;
