import { Action, RulesJson, ScriptableField } from './types';
import { BaseNode } from './BaseNode';
declare abstract class Scriptable<T extends RulesJson> extends BaseNode<T> implements ScriptableField {
    private _events;
    private _rules;
    get rules(): import("./types").Items<string>;
    private getCompiledRule;
    private getCompiledEvent;
    private applyUpdates;
    protected executeAllRules(context: any): void;
    private getExpressionScope;
    private executeEvent;
    /**
     * Executes the given rule
     * @param event
     * @param context
     * @private
     */
    executeRule(event: Action, context: any): void;
    executeExpression(expr: string): any;
    /**
     * Executes the given action
     * @param action    {@link Action | event object}
     */
    executeAction(action: Action): void;
}
export default Scriptable;
