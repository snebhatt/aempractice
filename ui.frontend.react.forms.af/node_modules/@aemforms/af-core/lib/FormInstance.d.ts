import { LogLevel } from './Form';
import { FormModel } from './types';
/**
 * Creates form instance using form model definition as per `adaptive form specification`
 * @param formModel form model definition
 * @param callback a callback that recieves the FormModel instance that gets executed before any event in the Form
 * is executed
 * @param logLevel Logging Level for the form. Setting it off will disable the logging
 * @param fModel existing form model, this is additional optimization to prevent creation of form instance
 * @returns {@link FormModel | form model}
 */
export declare const createFormInstance: (formModel: any, callback?: ((f: FormModel) => any) | undefined, logLevel?: LogLevel, fModel?: any) => FormModel;
/**
 * Validates Form model definition with the given data
 * @param formModel     form model definition
 * @param data          form data
 * @returns `true`, if form is valid against the given form data, `false` otherwise
 */
export declare const validateFormInstance: (formModel: any, data: any) => boolean;
/**
 * Helper API to fetch form model definition from an AEM instance
 * @param url       URL of the instance
 * @param headers   HTTP headers to pass to the aem instance
 * @returns promise which resolves to the form model definition
 */
export declare const fetchForm: (url: string, headers?: any) => Promise<string>;
