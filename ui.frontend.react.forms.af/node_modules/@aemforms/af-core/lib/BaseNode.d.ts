import { Action, BaseJson, BaseModel, callbackFn, ContainerModel, FormModel, Primitives, ValidationError } from './types';
import DataGroup from './data/DataGroup';
import DataValue from './data/DataValue';
export declare const target: unique symbol;
/**
 * Defines a generic base class which all objects of form runtime model should extend from.
 * @typeparam T type of the form object which extends from {@link BaseJson | base type}
 */
export declare abstract class BaseNode<T extends BaseJson> implements BaseModel {
    private _options;
    private _ruleNode;
    private _callbacks;
    private _dependents;
    protected _jsonModel: T & {
        id: string;
    };
    private _tokens;
    get isContainer(): boolean;
    /**
     * @constructor
     * @param params
     * @param _options
     * @private
     */
    constructor(params: T, _options: {
        form: FormModel;
        parent: ContainerModel;
    });
    abstract value: Primitives;
    protected setupRuleNode(): void;
    /**
     * @private
     */
    ruleNodeReference(): this;
    /**
     * @private
     */
    getRuleNode(): any;
    private getFromRule;
    get id(): string;
    get index(): number;
    get parent(): ContainerModel;
    get type(): string | undefined;
    get fieldType(): string;
    get ':type'(): string;
    get name(): string | undefined;
    get description(): string | undefined;
    set description(d: string | undefined);
    get dataRef(): string | null | undefined;
    get visible(): boolean | undefined;
    set visible(v: boolean | undefined);
    get form(): FormModel;
    get ruleEngine(): import("./rules/RuleEngine").default;
    get label(): import("./types").Label | undefined;
    set label(l: import("./types").Label | undefined);
    /**
     * Transparent form fields are meant only for creation of view. They are also not part of data
     */
    isTransparent(): boolean;
    getState(): T & {
        ':type': string;
        id: string;
    };
    /**
     * @private
     */
    subscribe(callback: callbackFn, eventName?: string): {
        unsubscribe: () => void;
    };
    /**
     * @private
     */
    addDependent(action: Action): void;
    /**
     * @private
     */
    removeDependent(action: Action): void;
    abstract validate(): Array<ValidationError>;
    abstract executeAction(action: Action): any;
    /**
     * @private
     */
    queueEvent(action: Action): void;
    dispatch(action: Action): void;
    /**
     * @private
     */
    notifyDependents(action: Action): void;
    /**
     * @param prop
     * @param newValue
     * @private
     */
    _setProperty<T>(prop: string, newValue: T, notify?: boolean): any;
    /**
     * @private
     */
    _bindToDataModel(contextualDataModel?: DataGroup): void;
    private _data?;
    /**
     * @private
     */
    getDataNode(): DataValue | undefined;
    get properties(): {
        [key: string]: any;
    };
    set properties(p: {
        [key: string]: any;
    });
    abstract defaultDataModel(name: string | number): DataValue | undefined;
    abstract importData(a: DataGroup): any;
    /**
     * called after the node is inserted in the parent
     * @private
     */
    _initialize(): void;
}
