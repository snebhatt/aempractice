"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseNode = exports.target = void 0;
const controller_1 = require("./controller");
const DataRefParser_1 = require("./utils/DataRefParser");
const EmptyDataValue_1 = __importDefault(require("./data/EmptyDataValue"));
/**
 * Implementation of action with target
 * @private
 */
class ActionImplWithTarget {
    /**
     * @constructor
     * @param _action
     * @param _target
     * @private
     */
    constructor(_action, _target) {
        this._action = _action;
        this._target = _target;
    }
    get type() {
        return this._action.type;
    }
    get payload() {
        return this._action.payload;
    }
    get metadata() {
        return this._action.metadata;
    }
    get target() {
        return this._target;
    }
    get isCustomEvent() {
        return this._action.isCustomEvent;
    }
    get originalAction() {
        return this._action.originalAction;
    }
    toString() {
        return this._action.toString();
    }
}
exports.target = Symbol('target');
/**
 * Defines a generic base class which all objects of form runtime model should extend from.
 * @typeparam T type of the form object which extends from {@link BaseJson | base type}
 */
class BaseNode {
    /**
     * @constructor
     * @param params
     * @param _options
     * @private
     */
    constructor(params, 
    //@ts_ignore
    _options) {
        this._options = _options;
        this._callbacks = {};
        this._dependents = [];
        this._tokens = [];
        this._jsonModel = Object.assign(Object.assign({}, params), { 
            //@ts-ignore
            id: 'id' in params ? params.id : this.form.getUniqueId() });
    }
    get isContainer() {
        return false;
    }
    setupRuleNode() {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        this._ruleNode = new Proxy(this.ruleNodeReference(), {
            get: (ruleNodeReference, prop) => {
                return self.getFromRule(ruleNodeReference, prop);
            }
        });
    }
    /**
     * @private
     */
    ruleNodeReference() {
        return this;
    }
    /**
     * @private
     */
    getRuleNode() {
        return this._ruleNode;
    }
    getFromRule(ruleNodeReference, prop) {
        if (prop === Symbol.toPrimitive || (prop === 'valueOf' && !ruleNodeReference.hasOwnProperty('valueOf'))) {
            return this.valueOf;
        }
        else if (prop === exports.target) {
            return this;
        }
        else if (typeof (prop) === 'string') {
            //look for property
            if (prop.startsWith('$')) {
                prop = prop.substr(1);
                //@todo: create a list of properties that are allowed
                //@ts-ignore
                // return only non functional properties in this object
                if (typeof this[prop] !== 'function') {
                    //@ts-ignore
                    return this[prop];
                }
            }
            else {
                //look in the items
                if (ruleNodeReference.hasOwnProperty(prop)) {
                    return ruleNodeReference[prop];
                }
                else if (typeof ruleNodeReference[prop] === 'function') { //todo : create allow list of functions
                    //to support panel instanceof Array panel1.map(..)
                    return ruleNodeReference[prop];
                }
            }
        }
    }
    get id() {
        return this._jsonModel.id;
    }
    get index() {
        return this.parent.indexOf(this);
    }
    get parent() {
        return this._options.parent;
    }
    get type() {
        return this._jsonModel.type;
    }
    get fieldType() {
        return this._jsonModel.fieldType || 'text-input';
    }
    get ':type'() {
        return this._jsonModel[':type'] || this.fieldType;
    }
    get name() {
        return this._jsonModel.name;
    }
    get description() {
        return this._jsonModel.description;
    }
    set description(d) {
        this._setProperty('description', d);
    }
    get dataRef() {
        return this._jsonModel.dataRef;
    }
    get visible() {
        return this._jsonModel.visible;
    }
    set visible(v) {
        if (v !== this._jsonModel.visible) {
            const changeAction = (0, controller_1.propertyChange)('visible', v, this._jsonModel.visible);
            this._jsonModel.visible = v;
            this.notifyDependents(changeAction);
        }
    }
    get form() {
        return this._options.form;
    }
    get ruleEngine() {
        return this.form.ruleEngine;
    }
    get label() {
        return this._jsonModel.label;
    }
    set label(l) {
        if (l !== this._jsonModel.label) {
            const changeAction = (0, controller_1.propertyChange)('label', l, this._jsonModel.label);
            this._jsonModel = Object.assign(Object.assign({}, this._jsonModel), { label: l });
            this.notifyDependents(changeAction);
        }
    }
    /**
     * Transparent form fields are meant only for creation of view. They are also not part of data
     */
    isTransparent() {
        var _a, _b;
        // named form fields are not transparent
        // @ts-ignore
        // handling repeatable use-case where first item of array can be unnamed
        const isNonTransparent = ((_a = this.parent) === null || _a === void 0 ? void 0 : _a._jsonModel.type) === 'array' && ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.items.length) === 1;
        return !this._jsonModel.name && !isNonTransparent;
    }
    getState() {
        return Object.assign(Object.assign({}, this._jsonModel), { ':type': this[':type'] });
    }
    /**
     * @private
     */
    subscribe(callback, eventName = 'change') {
        this._callbacks[eventName] = this._callbacks[eventName] || [];
        this._callbacks[eventName].push(callback);
        //console.log(`subscription added : ${this._elem.id}, count : ${this._callbacks[eventName].length}`);
        return {
            unsubscribe: () => {
                this._callbacks[eventName] = this._callbacks[eventName].filter(x => x !== callback);
                //console.log(`subscription removed : ${this._elem.id}, count : ${this._callbacks[eventName].length}`);
            }
        };
    }
    /**
     * @private
     */
    addDependent(action) {
        if (this._dependents.find(({ node }) => node === action.payload) === undefined) {
            const subscription = this.subscribe((change) => {
                const changes = change.payload.changes;
                const propsToLook = ['value', 'items'];
                // @ts-ignore
                const isPropChanged = changes.findIndex(x => {
                    return propsToLook.indexOf(x.propertyName) > -1;
                }) > -1;
                if (isPropChanged) {
                    action.payload.dispatch(new controller_1.ExecuteRule());
                }
            });
            this._dependents.push({ node: action.payload, subscription });
        }
    }
    /**
     * @private
     */
    removeDependent(action) {
        const index = this._dependents.findIndex(({ node }) => node === action.payload);
        if (index > -1) {
            this._dependents[index].subscription.unsubscribe();
            this._dependents.splice(index, 1);
        }
    }
    /**
     * @private
     */
    queueEvent(action) {
        const actionWithTarget = new ActionImplWithTarget(action, this);
        this.form.getEventQueue().queue(this, actionWithTarget, ['valid', 'invalid'].indexOf(actionWithTarget.type) > -1);
    }
    dispatch(action) {
        this.queueEvent(action);
        this.form.getEventQueue().runPendingQueue();
    }
    /**
     * @private
     */
    notifyDependents(action) {
        const handlers = this._callbacks[action.type] || [];
        handlers.forEach(x => {
            x(new ActionImplWithTarget(action, this));
        });
    }
    /**
     * @param prop
     * @param newValue
     * @private
     */
    _setProperty(prop, newValue, notify = true) {
        //@ts-ignore
        const oldValue = this._jsonModel[prop];
        let isValueSame = false;
        if (newValue !== null && oldValue !== null &&
            typeof newValue === 'object' && typeof oldValue === 'object') {
            isValueSame = JSON.stringify(newValue) === JSON.stringify(oldValue);
        }
        else {
            // @ts-ignore
            isValueSame = oldValue === newValue;
        }
        if (!isValueSame) {
            //@ts-ignore
            this._jsonModel[prop] = newValue;
            const changeAction = (0, controller_1.propertyChange)(prop, newValue, oldValue);
            if (notify) {
                this.notifyDependents(changeAction);
            }
            return changeAction.payload.changes;
        }
        return [];
    }
    /**
     * @private
     */
    _bindToDataModel(contextualDataModel) {
        if (this.id === '$form') {
            this._data = contextualDataModel;
            return;
        }
        const dataRef = this._jsonModel.dataRef;
        let _data;
        if (dataRef === null) {
            _data = EmptyDataValue_1.default;
        }
        else if (dataRef !== undefined) {
            if (this._tokens.length === 0) {
                this._tokens = (0, DataRefParser_1.tokenize)(dataRef);
            }
            let searchData = contextualDataModel;
            if (this._tokens[0].type === DataRefParser_1.TOK_GLOBAL) {
                searchData = this.form.getDataNode();
            }
            if (typeof searchData !== 'undefined') {
                const name = this._tokens[this._tokens.length - 1].value;
                const create = this.defaultDataModel(name);
                _data = (0, DataRefParser_1.resolveData)(searchData, this._tokens, create);
            }
        }
        else {
            if (contextualDataModel != null) {
                const name = this._jsonModel.name || '';
                const key = contextualDataModel.$type === 'array' ? this.index : name;
                if (key !== '') {
                    const create = this.defaultDataModel(key);
                    if (create !== undefined) {
                        _data = contextualDataModel.$getDataNode(key) || create;
                        contextualDataModel.$addDataNode(key, _data);
                    }
                }
                else {
                    _data = EmptyDataValue_1.default;
                }
            }
        }
        if (!this.isContainer) {
            _data = _data === null || _data === void 0 ? void 0 : _data.$convertToDataValue();
        }
        _data === null || _data === void 0 ? void 0 : _data.$bindToField(this);
        this._data = _data;
    }
    /**
     * @private
     */
    getDataNode() {
        if (this._data === undefined) {
            return this.parent.getDataNode();
        }
        return this._data;
    }
    get properties() {
        return this._jsonModel.properties || {};
    }
    set properties(p) {
        this._setProperty('properties', Object.assign({}, p));
    }
    /**
     * called after the node is inserted in the parent
     * @private
     */
    _initialize() {
        if (typeof this._data === 'undefined') {
            const dataNode = this.parent.getDataNode();
            this._bindToDataModel(dataNode);
        }
    }
}
exports.BaseNode = BaseNode;
