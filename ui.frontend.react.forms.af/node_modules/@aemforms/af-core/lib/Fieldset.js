"use strict";
/*
 * Copyright 2022 Adobe, Inc.
 *
 * Your access and use of this software is governed by the Adobe Customer Feedback Program Terms and Conditions or other Beta License Agreement signed by your employer and Adobe, Inc.. This software is NOT open source and may not be used without one of the foregoing licenses. Even with a foregoing license, your access and use of this file is limited to the earlier of (a) 180 days, (b) general availability of the product(s) which utilize this software (i.e. AEM Forms), (c) January 1, 2023, (d) Adobe providing notice to you that you may no longer use the software or that your beta trial has otherwise ended.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL ADOBE NOR ITS THIRD PARTY PROVIDERS AND PARTNERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fieldset = exports.createChild = void 0;
const Container_1 = __importDefault(require("./Container"));
const Field_1 = __importDefault(require("./Field"));
const FileUpload_1 = __importDefault(require("./FileUpload"));
const JsonUtils_1 = require("./utils/JsonUtils");
const Controller_1 = require("./controller/Controller");
const Checkbox_1 = __importDefault(require("./Checkbox"));
const CheckboxGroup_1 = __importDefault(require("./CheckboxGroup"));
/**
 * Creates a child model inside the given parent
 * @param child
 * @param options
 * @private
 */
const createChild = (child, options) => {
    let retVal;
    if ('items' in child) {
        retVal = new Fieldset(child, options);
    }
    else {
        if ((0, JsonUtils_1.isFile)(child) || child.fieldType === 'file-input') {
            // @ts-ignore
            retVal = new FileUpload_1.default(child, options);
        }
        else if ((0, JsonUtils_1.isCheckbox)(child)) {
            retVal = new Checkbox_1.default(child, options);
        }
        else if ((0, JsonUtils_1.isCheckboxGroup)(child)) {
            retVal = new CheckboxGroup_1.default(child, options);
        }
        else {
            retVal = new Field_1.default(child, options);
        }
    }
    options.form.fieldAdded(retVal);
    return retVal;
};
exports.createChild = createChild;
const defaults = {
    visible: true
};
/**
 * Defines a field set class which extends from {@link Container | container}
 */
class Fieldset extends Container_1.default {
    /**
     * @param params
     * @param _options
     * @private
     */
    constructor(params, _options) {
        super(params, _options);
        this._applyDefaults();
        this.queueEvent(new Controller_1.Initialize());
        this.queueEvent(new Controller_1.ExecuteRule());
    }
    _applyDefaults() {
        Object.entries(defaults).map(([key, value]) => {
            //@ts-ignore
            if (this._jsonModel[key] === undefined) {
                //@ts-ignore
                this._jsonModel[key] = value;
            }
        });
    }
    get type() {
        const ret = super.type;
        if (ret === 'array' || ret === 'object') {
            return ret;
        }
        return undefined;
    }
    // @ts-ignore
    _createChild(child, options) {
        const { parent = this } = options;
        return (0, exports.createChild)(child, { form: this.form, parent: parent });
    }
    get items() {
        return super.items;
    }
    get value() {
        return null;
    }
}
exports.Fieldset = Fieldset;
