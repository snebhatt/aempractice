var $hjKwo$reactariafocus = require("@react-aria/focus");
var $hjKwo$reactariautils = require("@react-aria/utils");
var $hjKwo$react = require("react");
var $hjKwo$reactariai18n = require("@react-aria/i18n");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$export(module.exports, "useActionGroup", () => $ceb684449a137553$export$f4bf8d43c16de704);
$parcel$export(module.exports, "useActionGroupItem", () => $44b92e5de834b44e$export$9597202bd3099a29);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



const $ceb684449a137553$var$BUTTON_GROUP_ROLES = {
    "none": "toolbar",
    "single": "radiogroup",
    "multiple": "toolbar"
};
function $ceb684449a137553$export$f4bf8d43c16de704(props, state, ref) {
    let { isDisabled: isDisabled, orientation: orientation = "horizontal" } = props;
    let [isInToolbar, setInToolbar] = (0, $hjKwo$react.useState)(false);
    (0, $hjKwo$reactariautils.useLayoutEffect)(()=>{
        var _ref_current_parentElement;
        setInToolbar(!!(ref.current && ((_ref_current_parentElement = ref.current.parentElement) === null || _ref_current_parentElement === void 0 ? void 0 : _ref_current_parentElement.closest('[role="toolbar"]'))));
    }, [
        ref
    ]);
    let allKeys = [
        ...state.collection.getKeys()
    ];
    if (!allKeys.some((key)=>!state.disabledKeys.has(key))) isDisabled = true;
    let { direction: direction } = (0, $hjKwo$reactariai18n.useLocale)();
    let focusManager = (0, $hjKwo$reactariafocus.createFocusManager)(ref);
    let flipDirection = direction === "rtl" && orientation === "horizontal";
    let onKeyDown = (e)=>{
        if (!e.currentTarget.contains(e.target)) return;
        switch(e.key){
            case "ArrowRight":
            case "ArrowDown":
                e.preventDefault();
                e.stopPropagation();
                if (e.key === "ArrowRight" && flipDirection) focusManager.focusPrevious({
                    wrap: true
                });
                else focusManager.focusNext({
                    wrap: true
                });
                break;
            case "ArrowLeft":
            case "ArrowUp":
                e.preventDefault();
                e.stopPropagation();
                if (e.key === "ArrowLeft" && flipDirection) focusManager.focusNext({
                    wrap: true
                });
                else focusManager.focusPrevious({
                    wrap: true
                });
                break;
        }
    };
    let role = $ceb684449a137553$var$BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];
    if (isInToolbar && role === "toolbar") role = "group";
    return {
        actionGroupProps: {
            ...(0, $hjKwo$reactariautils.filterDOMProps)(props, {
                labelable: true
            }),
            role: role,
            "aria-orientation": role === "toolbar" ? orientation : undefined,
            "aria-disabled": isDisabled,
            onKeyDown: onKeyDown
        }
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $44b92e5de834b44e$var$BUTTON_ROLES = {
    "none": undefined,
    "single": "radio",
    "multiple": "checkbox"
};
function $44b92e5de834b44e$export$9597202bd3099a29(props, state, ref) {
    let selectionMode = state.selectionManager.selectionMode;
    let buttonProps = {
        role: $44b92e5de834b44e$var$BUTTON_ROLES[selectionMode]
    };
    if (selectionMode !== "none") {
        let isSelected = state.selectionManager.isSelected(props.key);
        buttonProps["aria-checked"] = isSelected;
    }
    let isFocused = props.key === state.selectionManager.focusedKey;
    let onRemovedWithFocus = (0, $hjKwo$reactariautils.useEffectEvent)(()=>{
        if (isFocused) state.selectionManager.setFocusedKey(null);
    });
    // If the focused item is removed from the DOM, reset the focused key to null.
    (0, $hjKwo$react.useEffect)(()=>{
        return ()=>{
            onRemovedWithFocus();
        };
    }, [
        onRemovedWithFocus
    ]);
    return {
        buttonProps: (0, $hjKwo$reactariautils.mergeProps)(buttonProps, {
            tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,
            onFocus () {
                state.selectionManager.setFocusedKey(props.key);
            },
            onPress () {
                state.selectionManager.select(props.key);
            }
        })
    };
}




//# sourceMappingURL=main.js.map
