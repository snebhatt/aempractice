var $db6c23092fbfea22$exports = require("./ar-AE.main.js");
var $f4b3121a918895c4$exports = require("./bg-BG.main.js");
var $d01cc02a83842f4c$exports = require("./cs-CZ.main.js");
var $ae20f188998ad249$exports = require("./da-DK.main.js");
var $f17ee93fe12c77e5$exports = require("./de-DE.main.js");
var $9691dc6a69dd5ba9$exports = require("./el-GR.main.js");
var $b2385949437f9917$exports = require("./en-US.main.js");
var $ed6d4429037ec60d$exports = require("./es-ES.main.js");
var $c9cb32f5c221f118$exports = require("./et-EE.main.js");
var $5be8f6c4ad248dda$exports = require("./fi-FI.main.js");
var $3f46a428519ddd7e$exports = require("./fr-FR.main.js");
var $41c7f98604688f35$exports = require("./he-IL.main.js");
var $183e97db82c2cbf0$exports = require("./hr-HR.main.js");
var $749cae0664a7dc03$exports = require("./hu-HU.main.js");
var $4129f25b282c341e$exports = require("./it-IT.main.js");
var $908925465e00dbfc$exports = require("./ja-JP.main.js");
var $34fae452e2e356d9$exports = require("./ko-KR.main.js");
var $458e73ba0e56bdd4$exports = require("./lt-LT.main.js");
var $2ddf9ecf84010f95$exports = require("./lv-LV.main.js");
var $b787a09821b773ea$exports = require("./nb-NO.main.js");
var $6b951cc1b0de6d71$exports = require("./nl-NL.main.js");
var $fc3eb600d1c488fa$exports = require("./pl-PL.main.js");
var $ba0f4e25830e4bbf$exports = require("./pt-BR.main.js");
var $2cd34c446640bd1d$exports = require("./pt-PT.main.js");
var $55c7bf6cdae0bed5$exports = require("./ro-RO.main.js");
var $240e8ca0b043d76a$exports = require("./ru-RU.main.js");
var $c28c7ecdb94a1868$exports = require("./sk-SK.main.js");
var $c2d6776ba29b6517$exports = require("./sl-SI.main.js");
var $628464d96d5a7855$exports = require("./sr-SP.main.js");
var $5a1bcd0a675a6f60$exports = require("./sv-SE.main.js");
var $f71e9bc82e4a5a16$exports = require("./tr-TR.main.js");
var $cb1ece2578f5693e$exports = require("./uk-UA.main.js");
var $d8ce7cc5e4398a80$exports = require("./zh-CN.main.js");
var $8db5191ec1aacb53$exports = require("./zh-TW.main.js");
var $2BLaI$reactarialiveannouncer = require("@react-aria/live-announcer");
var $2BLaI$react = require("react");
var $2BLaI$reactariautils = require("@react-aria/utils");
var $2BLaI$reactariai18n = require("@react-aria/i18n");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "useSpinButton", () => $37bbd4c129023f61$export$e908e06f4b8e3402);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
var $cb4b786159079747$exports = {};


































$cb4b786159079747$exports = {
    "ar-AE": $db6c23092fbfea22$exports,
    "bg-BG": $f4b3121a918895c4$exports,
    "cs-CZ": $d01cc02a83842f4c$exports,
    "da-DK": $ae20f188998ad249$exports,
    "de-DE": $f17ee93fe12c77e5$exports,
    "el-GR": $9691dc6a69dd5ba9$exports,
    "en-US": $b2385949437f9917$exports,
    "es-ES": $ed6d4429037ec60d$exports,
    "et-EE": $c9cb32f5c221f118$exports,
    "fi-FI": $5be8f6c4ad248dda$exports,
    "fr-FR": $3f46a428519ddd7e$exports,
    "he-IL": $41c7f98604688f35$exports,
    "hr-HR": $183e97db82c2cbf0$exports,
    "hu-HU": $749cae0664a7dc03$exports,
    "it-IT": $4129f25b282c341e$exports,
    "ja-JP": $908925465e00dbfc$exports,
    "ko-KR": $34fae452e2e356d9$exports,
    "lt-LT": $458e73ba0e56bdd4$exports,
    "lv-LV": $2ddf9ecf84010f95$exports,
    "nb-NO": $b787a09821b773ea$exports,
    "nl-NL": $6b951cc1b0de6d71$exports,
    "pl-PL": $fc3eb600d1c488fa$exports,
    "pt-BR": $ba0f4e25830e4bbf$exports,
    "pt-PT": $2cd34c446640bd1d$exports,
    "ro-RO": $55c7bf6cdae0bed5$exports,
    "ru-RU": $240e8ca0b043d76a$exports,
    "sk-SK": $c28c7ecdb94a1868$exports,
    "sl-SI": $c2d6776ba29b6517$exports,
    "sr-SP": $628464d96d5a7855$exports,
    "sv-SE": $5a1bcd0a675a6f60$exports,
    "tr-TR": $f71e9bc82e4a5a16$exports,
    "uk-UA": $cb1ece2578f5693e$exports,
    "zh-CN": $d8ce7cc5e4398a80$exports,
    "zh-TW": $8db5191ec1aacb53$exports
};





function $37bbd4c129023f61$export$e908e06f4b8e3402(props) {
    const _async = (0, $2BLaI$react.useRef)();
    let { value: value, textValue: textValue, minValue: minValue, maxValue: maxValue, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, onIncrement: onIncrement, onIncrementPage: onIncrementPage, onDecrement: onDecrement, onDecrementPage: onDecrementPage, onDecrementToMin: onDecrementToMin, onIncrementToMax: onIncrementToMax } = props;
    const stringFormatter = (0, $2BLaI$reactariai18n.useLocalizedStringFormatter)((0, (/*@__PURE__*/$parcel$interopDefault($cb4b786159079747$exports))), "@react-aria/spinbutton");
    const clearAsync = ()=>clearTimeout(_async.current);
    // eslint-disable-next-line arrow-body-style
    (0, $2BLaI$react.useEffect)(()=>{
        return ()=>clearAsync();
    }, []);
    let onKeyDown = (e)=>{
        if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) return;
        switch(e.key){
            case "PageUp":
                if (onIncrementPage) {
                    e.preventDefault();
                    onIncrementPage();
                    break;
                }
            // fallthrough!
            case "ArrowUp":
            case "Up":
                if (onIncrement) {
                    e.preventDefault();
                    onIncrement();
                }
                break;
            case "PageDown":
                if (onDecrementPage) {
                    e.preventDefault();
                    onDecrementPage();
                    break;
                }
            // fallthrough
            case "ArrowDown":
            case "Down":
                if (onDecrement) {
                    e.preventDefault();
                    onDecrement();
                }
                break;
            case "Home":
                if (onDecrementToMin) {
                    e.preventDefault();
                    onDecrementToMin();
                }
                break;
            case "End":
                if (onIncrementToMax) {
                    e.preventDefault();
                    onIncrementToMax();
                }
                break;
        }
    };
    let isFocused = (0, $2BLaI$react.useRef)(false);
    let onFocus = ()=>{
        isFocused.current = true;
    };
    let onBlur = ()=>{
        isFocused.current = false;
    };
    // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).
    // This ensures that macOS VoiceOver announces it as "minus" even with other characters between the minus sign
    // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.
    // In addition, replace the empty string with the word "Empty" so that iOS VoiceOver does not read "50%" for an empty field.
    textValue = textValue === "" ? stringFormatter.format("Empty") : (textValue || `${value}`).replace("-", "\u2212");
    (0, $2BLaI$react.useEffect)(()=>{
        if (isFocused.current) {
            (0, $2BLaI$reactarialiveannouncer.clearAnnouncer)("assertive");
            (0, $2BLaI$reactarialiveannouncer.announce)(textValue, "assertive");
        }
    }, [
        textValue
    ]);
    const onIncrementPressStart = (0, $2BLaI$reactariautils.useEffectEvent)((initialStepDelay)=>{
        clearAsync();
        onIncrement();
        // Start spinning after initial delay
        _async.current = window.setTimeout(()=>{
            if (isNaN(maxValue) || isNaN(value) || value < maxValue) onIncrementPressStart(60);
        }, initialStepDelay);
    });
    const onDecrementPressStart = (0, $2BLaI$reactariautils.useEffectEvent)((initialStepDelay)=>{
        clearAsync();
        onDecrement();
        // Start spinning after initial delay
        _async.current = window.setTimeout(()=>{
            if (isNaN(minValue) || isNaN(value) || value > minValue) onDecrementPressStart(60);
        }, initialStepDelay);
    });
    let cancelContextMenu = (e)=>{
        e.preventDefault();
    };
    let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = (0, $2BLaI$reactariautils.useGlobalListeners)();
    return {
        spinButtonProps: {
            role: "spinbutton",
            "aria-valuenow": !isNaN(value) ? value : null,
            "aria-valuetext": textValue,
            "aria-valuemin": minValue,
            "aria-valuemax": maxValue,
            "aria-disabled": isDisabled || null,
            "aria-readonly": isReadOnly || null,
            "aria-required": isRequired || null,
            onKeyDown: onKeyDown,
            onFocus: onFocus,
            onBlur: onBlur
        },
        incrementButtonProps: {
            onPressStart: ()=>{
                onIncrementPressStart(400);
                addGlobalListener(window, "contextmenu", cancelContextMenu);
            },
            onPressEnd: ()=>{
                clearAsync();
                removeAllGlobalListeners();
            },
            onFocus: onFocus,
            onBlur: onBlur
        },
        decrementButtonProps: {
            onPressStart: ()=>{
                onDecrementPressStart(400);
                addGlobalListener(window, "contextmenu", cancelContextMenu);
            },
            onPressEnd: ()=>{
                clearAsync();
                removeAllGlobalListeners();
            },
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}




//# sourceMappingURL=main.js.map
